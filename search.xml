<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022行纪（01）</title>
    <url>/2022/09/07/2022%E8%A1%8C%E7%BA%AA%EF%BC%8801%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>前言：</p>
<p>本篇由多篇记录溯源整理而成，各部分时间有所跳动。</p>
</blockquote>
<h2 id="2022-7"><a href="#2022-7" class="headerlink" title="2022.7"></a>2022.7</h2><p>原本我为我的暑假准备了很多Todos，念在字节青训营并不容易坚持到底，故设计零散的目标分给暑假去实现。结果是选择了青训营，而Todos搁置一边。但这并不意味着这些Todos不再去做了，或者是暑假没有做事——青训营的学习心路还是值得一记的。</p>
<p>按照断更以来的时间顺序，我记下一些暑假前后的事情。</p>
<h3 id="实验，课设和考试"><a href="#实验，课设和考试" class="headerlink" title="实验，课设和考试"></a>实验，课设和考试</h3><p>实验完成得七七八八，其实在之前也被提到过，这学期压力算是很小，三个实验一个课设</p>
<p>计网实验怪怪的，不去实现TCP/IP协议或者是其他网络相关的东西，倒是用各种软件去模拟网络，甚至还要写程序模拟个交换机。对于可视化，想想需要Qt之类的写算法就贼麻烦，又没要求算法效率，所以直接JavaScript写了计网和操作系统需要可视化的部分，表格啊图表啊什么的。写一次就扔的文件，也没有用TypeScript的必要，降低投入成本。结果还算过得去，成绩都不差。</p>
<p>课设只有操作系统，我一眼就相中了“文件系统”。相比什么子进程同步锁，这模拟一个文件系统，完全就是字符串处理罢了，多简单啊！</p>
<p>于是用C写了两天写出来，还贼逼真，改改颜色几乎以假乱真了。剩下3天带着平板去实验室复习。毕竟考试吧，挺玄乎的，没有太多真题和往年卷，靠自己多做才行。计网和OS大多都是课后习题里出。</p>
<p>毛概就是背了，根据给的提示，狂背，困了就手打，能记住多少就是多少。好在选好老师，怎么折腾都不怕太差。</p>
<h3 id="重构了项目页面"><a href="#重构了项目页面" class="headerlink" title="重构了项目页面"></a>重构了项目页面</h3><p>准确来说是终于用上了UI库，是尤大曾推荐的Vuetify。使用体验还不错，只是初次接触，难免有些操作生硬的地方。比如侧边栏究竟跟顶栏谁盖住谁，人家UI库也没想着你会两个都要，导致交差一起不好看，东西被盖住，理所当然。我学前端不到半年，这样的意识还没有树立起来，还是要多多学习Material Design那些Guidelines。</p>
<p>至于监控页面的那个项目，经过简单的重构，打包的产物放在我新买的服务器上运行后，我就没有再动过了。两个月后，没想到老师让我展示展示，这下可尴尬，服务器已经关掉一个月了。这就说明，还是有必要物色一个常驻服务器了。</p>
<h3 id="尝试重构博客"><a href="#尝试重构博客" class="headerlink" title="尝试重构博客"></a>尝试重构博客</h3><p>用了上面说的UI库，我加上解析<code>.md</code>的功能，就大致把新博客做了出来。可惜很多地方解析不到位，还需要很多修缮。</p>
<p>时间不等人，重构一半，邮件弹出，青训营也开始了。</p>
<h3 id="进入基础班"><a href="#进入基础班" class="headerlink" title="进入基础班"></a>进入基础班</h3><p>从唠嗑大群人数来看，基本上交了卷都能进基础班。即使是这样我也没冒险去尝试进阶班，因为说不好没选上会连基础班都进不去，那暑假就容易荒废。大多数人来这里，一是为了找人合作最后的大项目，二是字节提供前端课程，三是这里的学习氛围。在这两个月学习中，我也体会到氛围的重要：交流、社区汲取是提升技术、开眼界的两个通道。</p>
<h2 id="2022-8"><a href="#2022-8" class="headerlink" title="2022.8"></a>2022.8</h2><blockquote>
<p>有道曰：“善始者众，善终者寡。”</p>
</blockquote>
<p>唠嗑群在开营前后几天，人数巅峰为3000有余。</p>
<h3 id="组队"><a href="#组队" class="headerlink" title="组队"></a>组队</h3><p>一波三折。</p>
<p>大多人第一次进入飞书，其中也包括了我。而迅速换上头像，能让我们更快融入其中。</p>
<p>我主动联系了许多人，他们有的已经实习，有的与我同年；有经验丰富，也有小白一枚。我并没太多想法，只是跟随一开始约好的人。一个8人群很快就组建完毕，甚至在Github上也有了Organization。此时，群内大约有5名大佬，久经沙场，另外3人我在内，是小白水平。组织名就叫：</p>
<blockquote>
<p>“心脏和字节只能有一个跳动”</p>
</blockquote>
<p>几天磋商，几天考量。结果磋商不大成功，群主似乎找好了下家，率先跑路；随后当天晚，另一名大佬也另谋高就，组织失去了两个重要的主心骨，不可谓不令人担忧队伍的后续发展。</p>
<h3 id="写项目"><a href="#写项目" class="headerlink" title="写项目"></a>写项目</h3><p>群内许久无音信，没人开始做项目，但我只有这一件事要做。一个人把项目骨架日出来就写文档，然后就是团队开发了。六人有三人参与项目开发，另有一人在后期负责PPT。</p>
<p>记得一个人写的那会，问题巨多，Vite3差点换成Vite2，后来<code>.umd.js</code>和<code>.css</code>编译在一起没引起什么特殊问题，才保留了Vite3。</p>
<p>到八月中旬，104支队伍提交项目。按每支队7人，三千人此时只剩下七百在坚持。</p>
<h3 id="暑假结束"><a href="#暑假结束" class="headerlink" title="暑假结束"></a>暑假结束</h3><p>答辩由另一位大佬主持。成绩还不错的，只是这个项目的潜力完全不止这点。如果当时6个人开足马力，必定是可以夺得第一。首先UI库跟模块结合打包有问题没解决，其次没做组件商城，这十分可惜。</p>
<p>晋级答辩60支队伍，即约420人，差不多是报名时的1/9。获得结营证书65人，是报名时的1/46。本来有结营资格的有130多人，结果过半被卡在旷课或笔记数量不够上——这是在项目截止后，运营组多给了一个星期去弥补笔记的情况下。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>年记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022行纪（03）</title>
    <url>/2023/01/09/2022%E8%A1%8C%E7%BA%AA%EF%BC%8803%EF%BC%89/</url>
    <content><![CDATA[<h2 id="2022-11"><a href="#2022-11" class="headerlink" title="2022.11"></a>2022.11</h2><h3 id="封校"><a href="#封校" class="headerlink" title="封校"></a>封校</h3><p>周三清晨的我，驻足在宿舍大楼门口，正准备重复一遍，上周三的苦状。</p>
<p>门口前，不合时宜的卷闸，与阳光灿漫的大街出现在同一时空——而在往常，只有早于六点的蒙蒙亮天空，才会去陪伴那堵钢铁卷闸门。</p>
<blockquote>
<p>🚧 11.9  封楼了</p>
</blockquote>
<p>原本这是双周（第十周），周三第一节有课，俗称“早八”，而编译原理课比较骇人，偶尔会给人不舒服的感觉。于我而言，恐怕莫过于浪费时间和精力在未涉足的内容上。</p>
<p>“回去都回去了，先等学校通知，”卷闸门外的衬衫西裤如此喊道。</p>
<p>我把卷闸门摄入镜头，发上几个熟悉的群聊。</p>
<p>驻足宿舍门外的好奇目光，越来越多，偶尔冒头，偶尔踱步。原路返回的这两分钟，微信群、QQ群消息如轰炸机落下的成堆炸弹，轰炸了整片社交圈。</p>
<p>于是趁着封楼、上网课的时间，开足马力做方舟的ppt。周三做到周日晚，几乎废寝忘食，所整理的图片资料无数，催生了一些新的需求，比如“私人图库”，给本地图片带上标签，方便查找。</p>
<h3 id="传教"><a href="#传教" class="headerlink" title="传教"></a>传教</h3><p>做了方舟和东方的PPT，后者需要备课上台演讲。两边都做得很好。对自己而言是十分乃至一百分满意的交代。</p>
<p>按顺序来，先是方舟的PPT——完成于11月13日晚，用时估计为七天满——在开始之前的一个星期就已经做准备工作。</p>
<p>《游戏中的历史与文化》，广州大学的一门非专业选修课，设于“历史与文化”栏目下，主讲教师是刘畅，偶尔不是。如果能在大二选上这么一门选修，大约是最合时宜的。二次元、游戏厨两个高度重合的标签，几乎属于这课堂中每个人。</p>
<p>往届在课堂上展示STG L难度的18级师兄，业已离开校园，以致老师不得不恢复以前的东方压轴宣讲节目。我拿下了这个配合演讲的机会，打了首发（红永妖花）的部分，也有少量的二创、社区内容。可惜讲本家内容时依旧支吾，是没有备课的。备课演讲，实际上需要环境和练习，而我的这些时间去复习车万、找美图去了，只要把本家内容讲个大概，有足够的梗和美少女，也就应该能满足听众。</p>
<p>此前那个周二，为了赶上可能的缺席机会，为了能让方舟也有机会登上讲台，拼力赶了一天幻灯片，连周三早上的组网技术课都在写这个。同时周末准备大量投入时间，结果发现作业抄错题，转而去赶作业，遂罢。推迟到这周二开展，依然赶了足足一天。</p>
<p>我设想的目标，实在过于精细，过于注重PPT的内容堆砌，内容密度一次又一次提高，还加入了不可能讲解的音乐。而这作为参评作业，竟没有获得奖项，实在耿耿于怀。</p>
<h2 id="2022-12"><a href="#2022-12" class="headerlink" title="2022.12"></a>2022.12</h2><h3 id="疫潮"><a href="#疫潮" class="headerlink" title="疫潮"></a>疫潮</h3><blockquote>
<p>👻 繁华与忙碌并没有如期而至，取而代之的是大面积感染如潮水般汹涌而来。</p>
</blockquote>
<p>十二月的我并没有像往常那样，挑灯夜战写实验报告，吸收课程考点，即使那本应该是这样。</p>
<p>此时的十二月，更像是年前的大扫除，除邋遢，把广州城一扫而空，大学生们如潮水回流大海，回到各自家乡。这段时间发生的事情太多，也有太多不如意。技术的学习几乎处于停滞，外来的干扰接二连三。课程虽有收获，但那显然不是我所需要的。</p>
<p>十一月初，封校，一个星期，厂的物资丰富，没有造成很大困扰。十一月下旬全国疫情传播，校内许多人都趁此跑回家。一个星期后，我在十二月五日启程回家，十分空荡，路途意外顺利，说明挑对了时间。这次大学生返乡潮之后，全国疫情已不受控制，二十号我在家里就感染了新冠，三天左右，遗留了一堆症状，比如口干咳嗽眼睛疼等等。这次提前返乡，实质上是把医疗压力分散到全国各地。</p>
<p>这便是三年抗疫的最终成效了。有失败的，也有成功的。让很多人晚三年感染新冠，但阻止不了新冠感染全部人。国家放下了防控压力，随之而来的是舆控压力。还记得，我们把2020称作“魔幻的一年”吗？</p>
<blockquote>
<p>“折戟沉沙铁未销，自将磨洗认前朝”</p>
</blockquote>
<p>症状变化大概如下：</p>
<ul>
<li>第一天（周一），困，头晕眼胀</li>
<li>第一天晚，高烧</li>
<li>第二天（周二），高烧</li>
<li>第三天，退烧</li>
<li>第四天，肺部肌肉酸痛</li>
<li>第五天~两个月内：咳嗽</li>
</ul>
<h2 id="总结（杂谈）"><a href="#总结（杂谈）" class="headerlink" title="总结（杂谈）"></a>总结（杂谈）</h2><p>每当杂谈，便是回顾，回顾便知未来打算。</p>
<p>整个学期过去的有些快。同时好像又什么都没做，此时1月9日坐在这里，几乎就和8月29号坐在此处一样。细数，九月加入团队，十月摸鱼，十一月赶工，十二月遣返，最后的十二月和一月共同承担了不该有之重。</p>
<p>因为续写的次数过多，屡屡想要全盘重写，又感到没什么好总结，做事重要。这样度过了大概三天，期间无非就是看书，运动，联机，咳嗽。连我都感觉时间过去的太快，以至于每天晚睡前、午睡前都努力想象着起来后可以干什么。而睡眠质量的下降需要额外的时间来休息，使本不充分利用的时间更加挤。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>年记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022行纪（02）</title>
    <url>/2022/11/22/2022%E8%A1%8C%E7%BA%AA%EF%BC%8802%EF%BC%89/</url>
    <content><![CDATA[<h2 id="2022-09"><a href="#2022-09" class="headerlink" title="2022.09"></a>2022.09</h2><p>壬寅年戊申月，已至学府，须臾而安定学府城中。</p>
<h3 id="无事者"><a href="#无事者" class="headerlink" title="无事者"></a>无事者</h3><p>研学者多试，有如二氧化碳维稳者，有如披防护服体验者，皆有酬寻试。</p>
<p>无事者如我，遂前应试，得报酬少许。复试之，尾声渐近，加之疲矣，故国庆后不再前往。</p>
<p>入学新者，军训必加之，募求劳务志愿者。</p>
<p>无事者如我，遂前劳之，得志愿时少许。复劳多日，甚无聊。</p>
<p>尾声之际，邻舍荐新兴小程序团队，职求前端。</p>
<p>无事者如我，遂前面试，得许，入队待命，辛亥月方得令开发，时至今日，愈发迫近。</p>
<h3 id="青训收尾"><a href="#青训收尾" class="headerlink" title="青训收尾"></a>青训收尾</h3><p>青训营答辩未登场，以他人代之，幸得成绩斐然，可喜可贺。此月暮，证书邮至，欣喜十分。装饰华丽，大方简重，记录留念；另有奖品数项，皆实用。其后打卡活动，日行万步，样式操练，算法进阶，百词收纳，尽数操持。Github教育有佬相助，得学生资格，尝Copilot，甚叹。</p>
<p>此外，去月已至辛亥纪念馆，今月复至，览中山公园，游大学城中环道路，游广外华师外围，叹防控，不得以入。</p>
<p>国庆，量其前一日无课，宜及早返乡，乃返。然任务繁重，游玩之时，不大尽兴。</p>
<h2 id="2022-10"><a href="#2022-10" class="headerlink" title="2022.10"></a>2022.10</h2><p>壬寅年庚戌月，复返学府。无重物携带，遂地铁后骑行。</p>
<p>随即，全员核酸日渐频繁，鲁迅门虽设而常关。</p>
<p>游戏历史如日中天如火如荼，人工智能算法之折腾孜孜不倦。</p>
<p>常至图书馆，空调有余力。时而日行万步，慢跑两千五。</p>
<h3 id="百日打卡"><a href="#百日打卡" class="headerlink" title="百日打卡"></a>百日打卡</h3><p>目前我已加入青训营的百日打卡计划，内容如下：<br>每日任务：力扣刷题、CSS学习、每日刷单词、日语学习、日行万步。<br>总体任务：写一个uni-app应用、日语N3、读书、重构博客。</p>
<p>而百日之后，我最终打算这样验收：</p>
<ul>
<li><p>从零开始做一个UI库</p>
</li>
<li><p>实现Mini-vue</p>
</li>
</ul>
<h3 id="在车万群开展活动"><a href="#在车万群开展活动" class="headerlink" title="在车万群开展活动"></a>在车万群开展活动</h3><p>（时间来到了十月末，10.28星期五的早上）</p>
<p>活动倒是展开的七七八八，算是久违地活跃了一波。先是STG接力和则赛，随后打算在年末再来个绘画接力。MC服开起来测试了会，不过似乎太吓人了，没什么人在里面深耕我写的任务。当然啦，这个周目我的动机是做给自己玩，给自己造一个安心的空间，所以有无人实际上不是主要的。<br>目前是什么状况呢？我想制造一个RPG地图，但是兼顾生存，分开两个世界，只要在进入世界时设置点指令即可。一个休闲，一个冒险，十分新颖。而且搭配有音乐、图书导入的功能（原型阶段），不可谓不是20年代MC的新享受。</p>
<h3 id="游戏课上讲车万和方舟"><a href="#游戏课上讲车万和方舟" class="headerlink" title="游戏课上讲车万和方舟"></a>游戏课上讲车万和方舟</h3><p>方舟可能没机会了，但是车万还好钦定上。不过方舟那个我打算当作作业，也给做出来，毕竟能讲的东西可太充足了。</p>
<h3 id="写年记"><a href="#写年记" class="headerlink" title="写年记"></a>写年记</h3><p>上一篇年记在2021.9就写了，而现在九月已经过去，国庆已至，需要例行对过去一年总结分析。<br>（2022.10.28）诚然，我并没有那么多时间真的从头写一篇，只能在已有的基础上持续更新近况。如果这是一个问题，那么同时也是一个需求，我可以做一个APP或是桌面应用来定制化解决这样的问题。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>年记</tag>
      </tags>
  </entry>
  <entry>
    <title>月记 ~ Nov-Dec 2021</title>
    <url>/2021/12/31/Nov-Dec2021/</url>
    <content><![CDATA[<h1 id="月记-Nov-Dec-2021"><a href="#月记-Nov-Dec-2021" class="headerlink" title="月记 ~ Nov-Dec 2021"></a>月记 ~ Nov-Dec 2021</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1440791983&auto=0&height=66"></iframe>

<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>！！注意：文章并不在一天内写完，故前后日期有跨度！！</p>
<p>相比起上月来，这个月“做”的东西很少，但能记的东西很多。所谓“做”就是指课堂之外的作为，开发、学习等。Unity进展有限，还需加把劲骑士。CSAPP竟然是快一个月不动了，刚好到DataLab那里停了，希望回去复习不会有什么事。其次就是上个月提到，这个月要做的事，做成了，就是“能记”的东西了。</p>
<blockquote>
<p>This directory contains the files that you will need to run the CS:APP<br>Data Lab, which helps develops the student’s understanding of bit<br>representations, two’s complement arithmetic, and IEEE floating point.</p>
</blockquote>
<p>没错，这就是前3节课的内容作了个Lab，所以有必要去做了再搞下面的课程；也许正因为要花一个单独的时间段来研究，我才没有继续下去……说是这么说，始终是逃避不掉的，因为学计组的时间，就只有这个半个学期。</p>
<p>看看第一篇文章，发现我的博客一周年了欸。如你所见，第一年下来，东西还是毛毛糟糟，有点乱的。昨日11月19日正是小雪，而去年11月21日，也是小雪。</p>
<h2 id="What-I-am-doing"><a href="#What-I-am-doing" class="headerlink" title="What I am doing"></a>What I am doing</h2><h3 id="锻炼调整与体测"><a href="#锻炼调整与体测" class="headerlink" title="锻炼调整与体测"></a>锻炼调整与体测</h3><p>经过一个月，校园跑计入路程已达100km。这期间有时候会长跑，但上个周记总结了，那样表面上不累，但疲劳会展现在你平常生活的各个地方，<strong>频繁长跑对我来说，是不适宜的</strong>。所以暂时回退，轻轻松松跑完2.5km便作罢。</p>
<p>这一个月下来，体育的体测已经完成了，但估摸着分数可能只有六十几分——一个是有所衰退，但另一个更重要的是老师体测标准太严——之后打拳考试的结果可能更让人失望！引体向上本来只需要90°，头在杆子下面就可以再上去了，然而此名老师要求180°伸直，做不到位还给你减。做了9个，减一个，8个，作罢，自然开摆。</p>
<p>我是自告奋勇第一个做的，至于后面老师对他们仁慈一点，还是说他们被前所未有的压力压倒而也只做了一两个？那就不得而知了（不过据经验前者的概率会大点，我可以大胆保证没有人真正能做到14个完全伸直的，为啥？因为没人准备过，并且没人知道老师这个对非体育生来说离谱的标准）</p>
<p>（12.30）个别也许有，但显然不稀奇，尤其是补做的，随随便便11、12个大有人在。</p>
<p>在12月上旬，校园跑跑完了，然而六级迫在眉睫，我这次确实真的没有去复习。</p>
<h3 id="重走JavaFX长征路"><a href="#重走JavaFX长征路" class="headerlink" title="重走JavaFX长征路"></a>重走JavaFX长征路</h3><p>第八周周记中记录了JavaFX出了问题，是EventDrived Programming那里的，现在解决了——其实是在idea下.java文件不能乱丢，必须丢进module-info.java记录的那个包里——也就是说想分类还是重开一个项目吧（主要是没看过官方手册，又有点懒，如果<strong>哪天去读读或许解决方案会更灵活</strong>）</p>
<p>（12.30）现在已是十七周，JavaFX有了一定的熟悉度（只能说是熟悉，没做过大型界面），而十五周末时转向了使用Qt，做起来感觉也不错。简洁有效，不知比某FC好到哪里去了。</p>
<h3 id="调整饮食习惯"><a href="#调整饮食习惯" class="headerlink" title="调整饮食习惯"></a>调整饮食习惯</h3><p>半个学期下来，也就是两个多月，由于课程安排奇葩，我的饮食习惯也发生了奇葩的自适应。周一周二的上午第二节均是物理，必定逃课，但下午又是空的（后来有了实验课），于是十点半左右就吃饭，称作“lunchfast”，即早餐和午餐合并，早餐就不吃了，午餐吃饱一点。后来舍友警告我这会得胃病，问其原因，听着有道理，也就改成之前的模式了。自适应不能依赖，因为自适应的方向，是以我已知的事情为基础的。因为不知而适应了糟糕的方向，暗病会累积。而为了赶时间，长期吃“lunchfast”确实没必要。</p>
<p>至于晚餐，只能说是“正在迎来回归”，校园跑还有11天跑完，之后便不再频繁下午4点吃饭了。但也不会晚上8点，那大概5点左右吧。这个点吃个饭，然后直接去教室自习（还有做作业）。</p>
<h3 id="Unity进行中"><a href="#Unity进行中" class="headerlink" title="Unity进行中"></a>Unity进行中</h3><p>这时候跟的是秦老师的课，也才见识每个人做游戏的代码实现都会大有不同。时间其实主要花在了画动画的方面——虽然没有任何基础，但一些球体、史莱姆之类的还是能画吧。</p>
<p>想了想，未来确实有可能会从事游戏行业——先走走看，要是解放后能力出众，又能遇上机会和良师益友，就可以彻底走这一条路了。</p>
<h3 id="各个科目的实验"><a href="#各个科目的实验" class="headerlink" title="各个科目的实验"></a>各个科目的实验</h3><p>数据结构，数据库，计组，Java，前三个尤为重型。数据结构花时间，但是值得；数据库瞎折腾居多；计组的实验最麻烦最不值得花时间。Java算是个小菜。目前我是如此评价这几个。</p>
<p>（12.30）今天已干完大部分，并且也干完了课设。针对我们班的情况，我要提一点：为何说计组实验没有什么意义？原因在于这几点明显的问题：①你不知道为何而来，大概是为了并不起作用的“实操”而来——有用的实操需要坚实的理论，不坚实是少也是踏实。显然，三个实验，三条指令，除了上过CSAPP的人对此有所准备，并没有一个人能独立做出来——绝大部分停在了对软件的不熟悉上。②没有任何指导。这就更为离谱了——这点上也很难去问老师：老师有说过吗？当然有；我们听得懂吗？当然听不懂，那顶啥用，不跟没讲一样。一句话，那是去讨骂的，也就是不想给你太多清晰的指示。以我们班的情况来看，我在盖棺定论：此种教学方式立下了天然的门槛，不合适。</p>
<p>这里给出建议，必须有充足的理论知识再上计组实验，不然是白搭。</p>
<h3 id="学习Qt"><a href="#学习Qt" class="headerlink" title="*学习Qt"></a>*学习Qt</h3><p>同时满足了数据结构课设和数据库，何乐而不为——主要还是想上手一个简易的非前端系界面库。</p>
<h2 id="What-I-have-done"><a href="#What-I-have-done" class="headerlink" title="What I have done"></a>What I have done</h2><h3 id="广州THO"><a href="#广州THO" class="headerlink" title="广州THO"></a>广州THO</h3><p>周末去tho，感觉良好，就是钱包空了。购入两本文学作品，浊浪的《偷光》和胡博士的《东方文化学刊》，一个射命丸文立牌。本可以免费领取一个，结果当时想看舞台表演，又想逛摊位，结果错失Muse Dash灵梦立牌一个，还挺大的。</p>
<p><img src="https://s2.loli.net/2021/12/30/JtjCU1s9AbwyRxq.jpg"></p>
<h3 id="出游"><a href="#出游" class="headerlink" title="出游"></a>出游</h3><p>11/5 星期六，与老李出游。朝至岭南印象园，园林颇大，物景颇丰。某些地方，感到已经不在园林以内，而在某个时代的街头。宜人之景，若气温再降三两度，旅途将更为舒坦。</p>
<p><img src="https://s2.loli.net/2021/12/30/yxN5R8VnjlpSUzm.jpg"></p>
<p>园内，见道儒多家之庙，见十八般兵器，见皮加索生平之作，见八零年代四大件，见昔日广州街道之景。</p>
<p>至晌午，老李南校饭堂一游，叹梅苑莫与之对比。</p>
<p>未时，游长洲岛辛亥革命纪念馆，胡乱走一小时后，竟仍未出馆，大耶。见救国者纷，但细数全员，仅乃当时人口千万之一，亦即千万睡者，仅醒其一，实属可贵。</p>
<p>后至黄埔军校，禁地，未摄。</p>
<p>申时，返程。</p>
<p><img src="https://s2.loli.net/2021/12/30/poemTYSrQBGN6Ps.jpg"></p>
<p>次日晚，校内呼啸不止，轰隆达旦，这么恶臭的事便不要记录了罢。而我有所耳闻，因依低居之员弗兰多尔乃越共之一，我等草丛中等闲之辈，无一不举众欢呼，为之欣慰，为之感慨，并入Legend of legend欢呼之众，献以助庆。摘冠刻内，已有梗佬献弗兰多尔持猎枪之图，梗盛一时。</p>
<h3 id="嵌入-第十周小记"><a href="#嵌入-第十周小记" class="headerlink" title="[嵌入]第十周小记"></a>[嵌入]第十周小记</h3><p>远程桌面折腾了很久，还没有成功。现在端口映射是没问题，但也只是映射到校园网内，因为分配的IP就是私有IP，所以DDNS还需要做点手脚，写个脚本，把“无效的IP”更新到DDNS解析服务器上。</p>
<p>不过通过这次搞DDNS的经历，认识了挺多问题，对过去的问题有了初步答案。</p>
<p>之前其他人开服都不能连接，其实是国内大部分路由获得的是私网IP，简单理解可以想象是我们的路由器上面其实还是个路由器，但这个大路由器是千家万户连在同一个上面的。</p>
<p>做端口转发的操作，是没错，从来都没错，我重复了数年的操作，其实从来都没错。</p>
<p>但是做完端口转发后，你的IP所在的子网是上级路由分配的，也就是说——</p>
<p><strong>还是在内网</strong></p>
<p>这就像拿我的内网IP 192.168.1.103给远在全国各地的玩家来联机，是没有任何区别的。</p>
<p>而我家里分配给的IP，恰恰是公网IP，所以一查就可以发给别人连。</p>
<p>GZHU校园网这个属于B类的内网，ip一查，外网ip是202开头的，而WAN显示是172开头，说明这查到的就是最上级主机的公网ip。</p>
<p>但是值得注意，虽然在内网，内网的机器倒肯定是可以互联了。</p>
<p>也就是说，如果我能把内网ip强制扔给3322更新，可以在校园网内连接路由，而外网连不到。</p>
<p>所以之前有人说，校园网内可以随意联机，这个问题也自然解决了，可以互相访问的。</p>
<p>（12.30）在11月末已实现，不难，需要的是熟悉一下shell编程即可，其他问题搜索引擎完全帮得上手。</p>
<p><img src="https://s2.loli.net/2021/12/31/S4GaBbcsW8LI2vo.png"></p>
<p><img src="https://s2.loli.net/2021/12/31/nARJS6LMwxeWBK3.png"></p>
<h4 id="实现了内网DDNS"><a href="#实现了内网DDNS" class="headerlink" title="*实现了内网DDNS"></a>*<strong>实现了内网DDNS</strong></h4><p>其实也没啥原理，API接口给了，重点在更新反馈、提示，我要做的也就是改改一些语句、改一下逻辑。估计会有人觉得这没意义，又不是公网要什么DDNS？如果真有人这么说，我还不知是笑是哭。没人想大清早，忙里偷闲似的打开自己wifi管理界面看看，现在WAN口IP是啥呀？然后设备IP变了没？然后把它们用微信发到”文件传输助手“，待会到教室对着IP输入——这等麻烦差事，其实也就是域名的产生原因。要是真这么搞？还没出门呢，发现就没时间吃早餐了，啃包吧。</p>
<h4 id="实现了远程桌面"><a href="#实现了远程桌面" class="headerlink" title="*实现了远程桌面"></a>*<strong>实现了远程桌面</strong></h4><p>为啥还记录呢？因为我的Win10版本唤作：</p>
<p><strong>Windows 10 家庭版</strong></p>
<p><img src="https://s2.loli.net/2021/12/30/eA48DbKNxl3ntEz.png"></p>
<p>需要”解锁“一下，去Github上下载个RDP Wrapper，发现更新跟不上，于是去TG群组观察了下，大佬们都给你写好了。</p>
<p>端口映射之类的就不说了，还有静态地址，老生常谈。总而言之，12周实现了之后，除了课设那会需要给老师展示，我上实验课再也没带过电脑——更可常见我两手空空，或者带瓶酸奶，就晃晃悠悠去实验室了。</p>
<img src="https://s2.loli.net/2021/12/31/4XC1SroWVTiKuFL.jpg" style="zoom:50%;" />

<img src="https://s2.loli.net/2021/12/31/TFqMs8nb97HIWJd.jpg" style="zoom: 33%;" />



<h3 id="两周Pygame写一个游戏"><a href="#两周Pygame写一个游戏" class="headerlink" title="*两周Pygame写一个游戏"></a>*两周Pygame写一个游戏</h3><p>虽然有跟着大佬的教程，但过程已基本掌握，故完成教程后，疯狂往里面添加自己想要的东西。</p>
<p>比如原教程只有直线射击，并且在同一水平线上打中敌人，我给改成了鼠标准心射击，并且区分了玩家和敌人的子弹。</p>
<p>比如只有单发的枪，我给加了个近战武器、榴弹发射器、霰弹等等。</p>
<p>比如教程给了敌人AI，我现在改了AI，变成了几种敌人，定位狙、突击兵、步兵等等。</p>
<p>其实脑洞可以更大，只不过时间有限，又是第一次写游戏，实现一些经典的东西完全不妨。</p>
<p>可惜唯独不通画术，无法把游戏性通过视觉表现出来，UI也比较勉强，没有点击音效、细化受击反馈，不太满意。</p>
<img src="https://s2.loli.net/2021/12/30/u1Ldfm8sBoiRc7A.png" style="zoom:125%;" />

<h2 id="What-I-plan-to-do"><a href="#What-I-plan-to-do" class="headerlink" title="What I plan to do"></a>What I plan to do</h2><p>/* 这里是十一月末时的Plan */</p>
<h3 id="修复评论区"><a href="#修复评论区" class="headerlink" title="修复评论区"></a>修复评论区</h3><p>又拖了几个星期，其实完全是忘了，闲下来的时候也没去搞，原因就是忘了</p>
<h3 id="小NAS计划"><a href="#小NAS计划" class="headerlink" title="小NAS计划"></a>小NAS计划</h3><p>目前可能要重刷固件了，因为硬盘插上去没有反应。</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 首先是刷原版固件，看看行不行</li>
<li><input disabled="" type="checkbox"> 不行的话，看看<a href="https://www.right.com.cn/forum/thread-3191532-1-1.html">这里</a>的固件能不能用</li>
<li><input disabled="" type="checkbox"> 再不行重买吧TAT</li>
</ul>
<p>次日补充：有所进展，能挂上去了，但是：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 需要让它自动挂载</li>
<li><input checked="" disabled="" type="checkbox"> 网络分享没用，先排查是不是win10的问题，参考这两篇文章：</li>
</ul>
<blockquote>
<p><a href="https://doc.embedfire.com/openwrt/user_manal/zh/latest/User_Manual/openwrt/samba.html">https://doc.embedfire.com/openwrt/user_manal/zh/latest/User_Manual/openwrt/samba.html</a></p>
<p><a href="https://blog.wang19.com/1252">https://blog.wang19.com/1252</a></p>
</blockquote>
<ul>
<li><input checked="" disabled="" type="checkbox"> 硬盘休眠一定要搞。先试试如何主动休眠，这里很详细了：</li>
</ul>
<blockquote>
<p><a href="https://www.right.com.cn/forum/thread-4041719-1-1.html">https://www.right.com.cn/forum/thread-4041719-1-1.html</a></p>
<p><a href="https://realneo.me/openwrt-spin-down-hard-disk/">https://realneo.me/openwrt-spin-down-hard-disk/</a></p>
<p><a href="https://www.chriscn.cn/openwrt-all-in-one-part-04-hdd-health-care/">https://www.chriscn.cn/openwrt-all-in-one-part-04-hdd-health-care/</a></p>
</blockquote>
<ul>
<li><input checked="" disabled="" type="checkbox"> 然后上一个磁盘管理，看看能否正常休眠</li>
</ul>
<blockquote>
<p><a href="https://github.com/lisaac/luci-app-diskman">https://github.com/lisaac/luci-app-diskman</a></p>
</blockquote>
<p>此次探索收获了不少命令，这里记录一下：</p>
<blockquote>
<p>hdparm -C /dev/sdb2 – 查看idle/active 硬盘在工作还是待机</p>
<p>smartctl -H /dev/sdb2 – 简单检测下健康状况</p>
<p>smartctl –all /dev/sdb2 – 信息</p>
<p>ps -ef | grep /opt/test.sh | wc -l – 查看test.sh进程数，用于判断是否已在执行</p>
</blockquote>
<p>一些关键性的扶手梯：</p>
<blockquote>
<p><a href="https://blog.csdn.net/kenen1985/article/details/96424575">https://blog.csdn.net/kenen1985/article/details/96424575</a> – cron设置</p>
<p><a href="https://segmentfault.com/a/1190000020855034">https://segmentfault.com/a/1190000020855034</a> – 避免cron一瞬间重复执行多个任务</p>
<p><a href="https://www.right.com.cn/forum/thread-2117504-1-1.html">https://www.right.com.cn/forum/thread-2117504-1-1.html</a> – 如何</p>
<p>echo -n 3 &gt; /proc/sys/vm/drop_caches – 清理内存</p>
<p>cron里不需要指定什么shell，直接五个* + 脚本路径即可。</p>
<p><a href="https://www.right.com.cn/forum/thread-2117504-1-1.html">https://www.right.com.cn/forum/thread-2117504-1-1.html</a> – 挂载硬盘，在此之前装了其他驱动</p>
</blockquote>
<p>（12.30）目前来看，完全已经实现了，只不过啊，用”移动固态“（其实就是速度快一点的U盘罢了）实在划不来，因为Router的cache不够大，速度被限死在32MB/s内，这个PSSD可是读495MB/s、写290MB/s的欸，太浪费了。于是后来拿来存游戏、资料、安装包。</p>
<p>另外一说，实现了校内DDNS更新，下面也有记录，之后看什么时候有时间传上去。</p>
<h3 id="给ipad上梯子"><a href="#给ipad上梯子" class="headerlink" title="给ipad上梯子"></a>给ipad上梯子</h3><p>（12.30）寒假回家再折腾吧，这个需要好好体验一下各种方式的差别，能不能有直接安装的方式。</p>
<h3 id="Unity继续稳步前进"><a href="#Unity继续稳步前进" class="headerlink" title="Unity继续稳步前进"></a>Unity继续稳步前进</h3><p>（12.30）遗憾，并没有继续。</p>
<p>意外的是去整了个Pygame，在我自己看来其实还蛮有意思的，即使是跟着教程做出来的，做完之后我可在上面捣鼓了一番，整了些弹药啊，机制啊之类的东西。只可惜没有相应的美工，没有往细节上开发，人物很粗糙。</p>
<h3 id="MC服务器开新周目"><a href="#MC服务器开新周目" class="headerlink" title="MC服务器开新周目"></a>MC服务器开新周目</h3><p>想做一个半RPG半生存的周目，有交易，世界分两个，一个是可破坏、挖矿，每周五刷新，作为“资源世界”，这些收集的资源，可以转化为插件支持的线上货币，换句话说，这个世界是“劳动世界”，随后所有的物品，都需要在交易中获得，因此交易模块要下很大功夫；另一个类似地皮，后者要具体研究一下怎么设计。我建议是有公共区域、多级权限。然后还有探索世界，不可破坏，但是有很多随机地牢，箱子可以拿；最后是一个“斗争血脉”世界，机制可以设置为必须要待多久、找到某些物品才能出来，有寄生虫等强力敌人，但是在这个世界的尽头，隐藏着神器和仙境的入口。</p>
<p>我们来细化一下吧：</p>
<p>货币分类，分三种吧，常规币、流通币、收藏币。第三者玄学比较大。经济打算和实物进行一一对应，也就是“半经济化”，经济数字仅仅起不同世界之间的数据衔接作用。</p>
<p>武器材质方面，避开原版，先创造一种陌生感，强化高级感，</p>
<p>好的话可以通过插件直接实现，坏的就是要自己搞计分板。</p>
<blockquote>
<p><a href="https://www.mcbbs.net/forum-servermod-1.html">https://www.mcbbs.net/forum-servermod-1.html</a></p>
<p>登录：<a href="https://www.mcbbs.net/thread-586047-1-1.html">https://www.mcbbs.net/thread-586047-1-1.html</a></p>
<p>反假人：<a href="https://www.mcbbs.net/thread-1212504-1-1.html">https://www.mcbbs.net/thread-1212504-1-1.html</a></p>
<p>世界进入等级：<a href="https://www.mcbbs.net/thread-734215-1-1.html">https://www.mcbbs.net/thread-734215-1-1.html</a></p>
<p>战斗系统：<a href="https://www.mcbbs.net/thread-1094927-1-1.html">https://www.mcbbs.net/thread-1094927-1-1.html</a></p>
<p>签到系统：<a href="https://www.mcbbs.net/thread-1056080-1-1.html">https://www.mcbbs.net/thread-1056080-1-1.html</a></p>
<p>多经济（需要前置Vault）：<a href="https://www.mcbbs.net/thread-962904-1-1.html">https://www.mcbbs.net/thread-962904-1-1.html</a></p>
<p>属性插件（深度开发）：<a href="https://www.mcbbs.net/thread-898670-1-1.html">https://www.mcbbs.net/thread-898670-1-1.html</a></p>
<p>属性药水（上面插件的增强）：<a href="https://www.mcbbs.net/thread-914482-1-1.html">https://www.mcbbs.net/thread-914482-1-1.html</a></p>
<p>后台管理：<a href="https://www.mcbbs.net/thread-1230139-1-1.html">https://www.mcbbs.net/thread-1230139-1-1.html</a></p>
<p>塔科夫模式：<a href="https://www.mcbbs.net/thread-1196298-1-1.html">https://www.mcbbs.net/thread-1196298-1-1.html</a></p>
<p>多世界：<a href="https://www.mcbbs.net/thread-1016455-1-1.html">https://www.mcbbs.net/thread-1016455-1-1.html</a></p>
<p>任务（仔细看，支持1.12）：<a href="https://www.mcbbs.net/thread-1145608-1-1.html">https://www.mcbbs.net/thread-1145608-1-1.html</a></p>
<p>另一个任务插件：<a href="https://www.mcbbs.net/thread-826783-1-1.html">https://www.mcbbs.net/thread-826783-1-1.html</a></p>
<p>又一个任务插件：<a href="https://www.mcbbs.net/thread-805904-1-1.html">https://www.mcbbs.net/thread-805904-1-1.html</a></p>
</blockquote>
<p>列完这一堆东西才发现，和我上一次使用插件相比，原来mc插件生态早已远超我的想象</p>
<p>战斗系统可以丰富，但如何与生活的世界搭配，需要平衡。我认为要克制好武器伤害的上限，不能有超模的，加大附魔难度，不要让附魔书轻易进入玩家手中。</p>
<p>限制地狱、末地的进入等级。</p>
<p>顺便记录一下开发启动器可以参考的文章：</p>
<blockquote>
<p> <a href="https://blog.csdn.net/SuZiAngi/article/details/81357998">https://blog.csdn.net/SuZiAngi/article/details/81357998</a></p>
</blockquote>
<blockquote>
<p> <a href="https://space.bilibili.com/44537204/channel/seriesdetail?sid=351828">https://space.bilibili.com/44537204/channel/seriesdetail?sid=351828</a></p>
</blockquote>
<p>整合包的实现方法依旧严格按照以前的层级：①给分类，基础类，次基础类+主内容，辅内容，花边，五种。②按层级添加mod和插件，测试压力我还没有定论，因为这和时间有关。③过程中出现严重冲突需要换mod插件的，越基础的等级越需要更长时间的海选、谨慎挑选。</p>
<p>（12.30）目前服务器已经开了起来，不过还没用上该有的那些主体功能插件，比如登录、经济、签到、任务等等系统。越到忙的时刻，越意识到一个事实：一直准备是永远准备不好的，必须开起来了再说。于是草草整了个包，12.28开服，12.29帮无言搞定了系统问题，这个周目大概就先开起来了。唯一问题在于比较卡，可能要削掉某些东西。</p>
<hr>
<p>– 此处以下是年末Plan –</p>
<h2 id="What-I-Plan-To-Do-in-early-2022"><a href="#What-I-Plan-To-Do-in-early-2022" class="headerlink" title="What I Plan To Do in early 2022"></a>What I Plan To Do in early 2022</h2><p> 简述：物理实验抄写、期末考试</p>
<h4 id="期末考试（时间12-31-1-20）"><a href="#期末考试（时间12-31-1-20）" class="headerlink" title="期末考试（时间12.31-1.20）"></a>期末考试（时间12.31-1.20）</h4><p>概率论：宋浩，试题</p>
<p>计组：CSAPP，试卷</p>
<p>数据结构：重学课本，走试题</p>
<p>数据库：找重难点，总结一下，然后课本、试题都过一遍。</p>
<h4 id="做一个MC启动器更新器"><a href="#做一个MC启动器更新器" class="headerlink" title="做一个MC启动器更新器"></a>做一个MC<del>启动器</del>更新器</h4><p>包含内容：对比mods、config、统一命名，保留不在列表里的、删除旧版本的。</p>
<h4 id="给JAVA作业糊界面"><a href="#给JAVA作业糊界面" class="headerlink" title="给JAVA作业糊界面"></a>给JAVA作业糊界面</h4><h4 id="给数据库的实验3收尾"><a href="#给数据库的实验3收尾" class="headerlink" title="给数据库的实验3收尾"></a>给数据库的实验3收尾</h4><p>不要做得太精细！！！反过来，报告写细点！！</p>
<h1 id="文末补充："><a href="#文末补充：" class="headerlink" title="文末补充："></a>文末补充：</h1><p>介绍的比较详细的挂载贴：<a href="https://www.right.com.cn/FORUM/thread-80771-1-1.html">https://www.right.com.cn/FORUM/thread-80771-1-1.html</a></p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>月记</tag>
      </tags>
  </entry>
  <entry>
    <title>月记 ~ Oct 2021</title>
    <url>/2021/10/18/Oct2021/</url>
    <content><![CDATA[<!-- more -->

<h1 id="月记-Oct-2021"><a href="#月记-Oct-2021" class="headerlink" title="月记 ~ Oct 2021"></a>月记 ~ Oct 2021</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>继上一篇年记以来有约莫一个月，也算是遵循自己立下的规矩了。上个月写年记要求自己至少一个月post一篇记录or笔记，可以不长，但必须得有。</p>
<p>十月经历了两个秋日标志性的节气——寒露和霜降，其中还夹了个重阳节。经过这三个节日，气温有了明显下降，变得比较适合人类居住（指23℃上下波动），尘封一年的格子衫也终于重见天日。</p>
<p>但实际上我还感觉到一丝干燥，但当日湿度是55%左右，不知是不是风大所致。</p>
<p>这个月人的心态是比较放松的——当然，具体指的其实是，比较有空闲时间，可以做很多想做的事。</p>
<p>做了什么事，这里开始总结下。</p>
<hr>
<h2 id="What-I-am-doing"><a href="#What-I-am-doing" class="headerlink" title="What I am doing"></a>What I am doing</h2><h3 id="CS-APP的学习"><a href="#CS-APP的学习" class="headerlink" title="CS:APP的学习"></a>CS:APP的学习</h3><blockquote>
<p>“这计组课本不知道在写什么。我已经尽力尝试去理解了。”</p>
<p>“I don’t really understand what the book is talking about, even though I have tried to.”</p>
</blockquote>
<p>令人怀疑的例题解释和课本习题，导致我无法再继续完全只靠《计算机组成与系统结构（第2版）》这本书学习这门课。</p>
<p>10月8日，我上台讲代码。讲完了，经老师一指点才发现自己竟然没有用到任何一个例子（ppt里面那个除外，那是要解决的问题）。丢掉举例解释，就不能指望别人理解你说的Solution；丢掉好的例子，就不能指望别人理解透彻。</p>
<p>这两件事后我明白，举例在说话时有多重要——对具体事物抽象的能力，是工科生、理科生的必备专业技能；但反过来，我发现我和不少人已经忘记：将抽象概念安装到合适的例子和事物上，才是实践。只挑自己不熟的活练手，会导致极易忽略自己原来很熟悉的东西，也叫“邯郸学步”。</p>
<p>说了这么多，CS:APP登场了。这既是一本书又是一个课程，全名Computer Science: A Programmer’s Perspective，如其书名，从一个程序员的角度去看计算机各层的运作。在B站上已有中英字幕的网课，而电子书搜一搜也有。至于其中涉及的lab，去官网找self study handout即可，不需要实名注册。到10月8日，追到Lecture 3，目前感觉良好。</p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>和之前一样，进度不快，还在JavaFX处停留。</p>
<p>LibericaJDK——虽然有些明明需要JavaFX的mc启动器不认识LibericaJDK，但那启动器毕竟是别人业余开发的，我甚至都没Donate，那只能看开发者心情。不过这跟学习JavaFX就没什么关系了。</p>
<h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><p>目前学起来还是Confusing，该学好的没学好（其实连功夫都没下）。</p>
<p>栈、队列等代码是会写了，但应用范围太窄，人家stl又把轮子写好了，所以不知道自己要干什么。期待Java能快点进步是因为快到数据结构的内容了，我也可以肯定，在遇到什么刺激之前，我只有学到Java数据结构那块。我才会认真学数据结构，否则摸了。</p>
<h3 id="锻炼"><a href="#锻炼" class="headerlink" title="锻炼"></a>锻炼</h3><p>主要是校园跑。</p>
<p>目前的42.5km中，有一次骑车，但还有一次3km的因为没走必经点没有记录，所以替换一下，可以视为纯度很高的锻炼了。</p>
<p>平均速度大概5’45’’一公里，不求快，只求锻炼到位。体测时发现肺活量明显上升了（4200-&gt;4750），可能也得益于这样的锻炼。</p>
<p>引体向上也不像上个学期般吃力，也许这也是我想要的。</p>
<p>毕竟到了期末那会，冷的要死，必定也不想出去锻炼了，所以练好体质，应对后面成堆而来的考试（我靠，我差点忘了还有CET-6，怎么办？）</p>
<hr>
<h2 id="What-I-have-done"><a href="#What-I-have-done" class="headerlink" title="What I have done"></a>What I have done</h2><h3 id="重装系统后的恢复"><a href="#重装系统后的恢复" class="headerlink" title="重装系统后的恢复"></a>重装系统后的恢复</h3><p>起因是C#脚本无高亮，结果后面发现VS积累一年的暗病没法忍受了。Installer表示也无能为力，卸不掉，装不上，安装位置各种错误，起因可能是我之前把VS从C盘迁移到了另一个盘。虽然项目和设置里大多适配了，但各种毛病还是层出不穷。</p>
<p>于是重装了系统。</p>
<p>写代码，有高亮和没高亮是两个世界。大师可以在没高亮的世界感受六根清净，但菜鸟可以在没高亮的情况下自然是从入门到入土。新的语言API不熟悉，在版本也不一样的情况下，很难把稍有不同的部分进行下去——互联网往往也爱莫能助，只能给你一份API reference瞎折腾去。</p>
<p>许多环境配置倒不再那么棘手——轻车熟路是一部分，自己解决问题的能力也跟上一次重装系统时有略微变化了。</p>
<p>这次乖乖把VS装在了C盘，此后不敢再动它。</p>
<p>当然，需要倒腾的还有hexo博客的一些配置，但只要你能看到这篇文章，说明我已经完成了。</p>
<h3 id="村通网"><a href="#村通网" class="headerlink" title="村通网"></a>村通网</h3><p>用小米3G路由器刷上了自己编译的原版固件，正常运行。</p>
<p>但在校内想要上网，还得比其他OpenWRT用户多考虑一步：你需要编译一个ipk适合自己学校校园网用的，通过在Windows上用WinSCP和ssh将它和它的图形化附属安装上去，调参数和设置，然后，才能上网。</p>
<p>所以在编译好固件之后还得使用SDK单独编译好以上的包，才能通过OpenWRT的镜像源去镜像站下载各种Software，比如i18n，UPnP，nlbwmon等。</p>
<h4 id="这个过程中涉及的环境配置很多。"><a href="#这个过程中涉及的环境配置很多。" class="headerlink" title="这个过程中涉及的环境配置很多。"></a>这个过程中涉及的环境配置很多。</h4><p>首先得有一个足够的磁盘，最好留出100G左右的空间。安装Ubuntu分配60-80G，剩余的留给风险。</p>
<p>其次是，主机网络环境（假设是Win10），要求必须有顺畅的全局或PAC过GFW的环境，不然会吃很多苦头。今年3月份时我试过自己编译固件，然而那时候没有这个环境，导致2~3小时的等待，最后编译失败。过了半年，到今早，看着ImmortalWrt的编译过程，上百万行代码呼啸滚动，我心里蛮舒服的——因为我觉得那是编译成功的欢呼。</p>
<img src="https://raw.githubusercontent.com/RH-Xie/RH-Xie.github.io/images/When%20compilation%20is%20done.png" style="zoom:55%;" />

<p>扯远了，继续说环境——还得设置虚拟机的网络环境。其实上一段已经说了，我是在虚拟机Ubuntu下编译的，而且又是校园网，桥接模式效果不佳（具体原因我不了解，所以不能乱说），所以虚拟机的网络得调成NAT。而对于想给虚拟机可以过GFW的能力，还得多一步：这里以猫猫为例，要打开Allow LAN，然后在Ubuntu的Network-&gt;Network Proxy里设置http proxy（听说SSR是socks5协议，具体要查询适合自己的），ip为主机的DNS（多种方法，最直接的是ipconfig里以太网（Cable）或WLAN（Wifi）中看），端口为猫猫代理的端口，通常显示在General里。</p>
<p>不过，挺庆幸我这次思维转换了——之前我还想着小飞机和猫猫软件本体哪个在linux系统下，用起来简单点，结果想了想，是虚拟机，那应该可以共享网络嘛。</p>
<p>如果你像我这样会在图书馆、教室等地方使用PC，请记住，主机DNS会变，及时在虚拟机更改你Manual下的代理地址。所以我建议只在宿舍编译固件，环境算稳定。（当然你可以选择调好了所有东西，然后去教室开始编译，丢一边做别的事，但实际我试过，教室等地的WLAN，似乎不那么赞同你这么做，即使图书馆可能相对教室更稳定一点）</p>
<p>最后，才到OpenWrt的登场。你需要阅读官方手册，明白什么是SDK什么是Image，然后按官方教程配置环境、编译。这是我第一次认真地阅读大篇幅的官方文档。</p>
<p>在此体验的过程中，我认为官方教程里使用的最好的教学模式，是先给出所有要执行的命令，然后下面有每条命令的详细解释——其实就我来说，能折腾到这里，说明的部分就算不能全看懂，也能知道自己执行命令的各种后果（results）了。为了防止囫囵吞枣，教程里还塞了点有标识“xxx”代替具体镜像和软件的名字，让读者自己填充，何尝不是一种检验读者的手段。就算再不济，教程还给了例子呢，照着例子去找合适自己的，这个连我都能学会了。<del>不像某计组课本</del></p>
<p>至于WinSCP和ssh等软件和命令的使用，靠国内互联网可以解决问题。</p>
<p>其余的事情，比如影响git传输的，有两个问题，一个是dns解析不了github.com，但主机可以，那就搜一下如何绑定github.com和解析出来的ip；另一个是git走代理，走的是ssh协议，也可以百度谷歌解决问题。</p>
<h4 id="你以为这就结束了？路由器怎么办？"><a href="#你以为这就结束了？路由器怎么办？" class="headerlink" title="你以为这就结束了？路由器怎么办？"></a>你以为这就结束了？路由器怎么办？</h4><p>上面是主机和虚拟机的，路由器这一端还有环境配置。</p>
<p>如果是新的linux系统路由器，可能需要刷入开发版之类的。不知道该不该说“好在”，商家已经给路由器刷了Breed，即Boot and Recovery Environment for Embedded Devices。没了体验成功刷入breed的过程，但也没有刷机失败变砖的风险下，也为我省去了一点时间。</p>
<img src="https://i.loli.net/2021/10/20/rIHFX9wgqhnVJty.png" style="zoom:75%;" />

<p>对于刷机失败，你如何认识这种事件？</p>
<p>以一个亲历者的角度来看，其实这不是“固件完好和版本是否完全对应，并且操作是否完全正确”就能决定的，刷机失败是赌上概率的事。</p>
<p>而我在中午恰恰就体验了一把刷固件失败：在OpenWrt界面刷入sysupgrade.bin（此前已刷入kernel.bin），十多分钟了，路由器没有动静，Web一直转圈圈。</p>
<p>正常刷机成功不需要等待这么久，并且成功了会自动刷新到登录页面——恰恰这次刷固件出了意外。</p>
<p>我在以为它刷入完成的情况下，手动重启了。结果开机后黄灯常亮不止，几分钟没变过蓝灯。</p>
<img src="https://i.loli.net/2021/10/20/LV7fkYsZ9bhwc5l.jpg" style="zoom:18%;" />

<p>直到写下这些文字时，我依然认为我的操作万无一失，并且和之前刷入成功的操作没有任何变动——但它就是失败了。</p>
<p>还好，不是有Breed救命嘛，给了我重新刷机的机会。熟练操作下，第二次和第一次操作完全相同，而第二次却成功了。</p>
<p>虽然备份都没用上，但至少给了几分刷机的底气。</p>
<p>提一提最后设置RJ验证时，因为是新版本的固件，21.02的，没有了Physical Settings这一栏，需要把三个接口（minieap、wan、wan6）都归到eth0下，Save&amp;Apply，然后拔掉WAN口网线，重启，再插上，等个三五分钟，直到WAN口绿灯常闪，否则再重启重复上面步骤。</p>
<p>至于为啥不玩旧版本嘛，官网上写着stable了，然后看看也支持小米3G，所以心想就整个新的进去。结果最后看到路由器界面，下面赫然写着“21.02 SNAPSHOT”，也不知道是不是我理解错了什么。</p>
<h4 id="总之，村通网了。"><a href="#总之，村通网了。" class="headerlink" title="总之，村通网了。"></a>总之，村通网了。</h4><p>这个过程中遇到的问题，吸收的教训，很多。</p>
<p>但折腾好了，还是会有成就感，并且Private Room+1。</p>
<p>这个路由还打算干点别的，也有可能重刷，就写在Plan to do里面吧。</p>
<p>目前对固件的内存占用（运行居然需要60MB）比较不满意（无论是OpenWRT还是三方固件ImmortalWRT），着手优化这一块。</p>
<h3 id="去玩"><a href="#去玩" class="headerlink" title="去玩"></a>去玩</h3><p>原本计划国庆10.4去THO，结果不料因为一个国际会展取消了。虽然跳票不是Cyberpunk 2077专属，但难得国庆佳节，很多人这下半年只在这个假期有时间，遇到跳票只得含恨/remake。心急的老哥在第一次推迟通知时取消了一次机票，在THO获得一线生机后又买票——随之第二次推迟通知就在当晚发出，老哥的机票和酒店退款，血亏上千。</p>
<p>此后我的国庆计划便是空空如也——其实不计划也有我的个人原因，感冒了。</p>
<p>首先不想带病乱跑，其次想要养病，这感冒咳嗽始终需要静养的时间。</p>
<p>然后situ2001一行人有计划，带深大来的老同学逛逛广州，我倒同意去凑个热闹——选择哪个其实都挺好。静养，宿舍里也大有可为；而出去玩呢，熟悉广州，也是何乐而不为。至于病，痛在口腔溃疡。实际上时，口腔溃疡还很重，但毕竟饭是要吃的。几天大餐如果放在平时，那可太享受了——猪扒包和一大柄鸡腿。而国庆享受这需要大量咬合力的晚餐时，只能磨着伤口吃香喝辣，痛苦并快乐着了，哈哈。<del>（广大学子青春版.jpg）</del></p>
<h3 id="看番"><a href="#看番" class="headerlink" title="看番"></a>看番</h3><p>国庆期间和舍友在宿舍看完了《冰菓》，虽然不时有点卡顿，但还能接受。剧情在平淡和稳定中度过，女主千反田的人物印象一直都很清晰（其实看之前已经觉得这个角色的辨识度非常高了）。和魔旅一样，我还是认同这番出第二季的。</p>
<hr>
<h2 id="What-I-plan-to-do"><a href="#What-I-plan-to-do" class="headerlink" title="What I plan to do"></a>What I plan to do</h2><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><h4 id="路由器改良"><a href="#路由器改良" class="headerlink" title="路由器改良"></a>路由器改良</h4><ul>
<li><input disabled="" type="checkbox"> 内存占用缩小</li>
<li><input disabled="" type="checkbox"> 定时重启的脚本</li>
<li><input disabled="" type="checkbox"> 定时断电通电（外设）</li>
</ul>
<h4 id="集齐功能"><a href="#集齐功能" class="headerlink" title="集齐功能"></a>集齐功能</h4><ul>
<li><input disabled="" type="checkbox"> UPnP</li>
<li><input disabled="" type="checkbox"> OpenClash（仍需考量）</li>
<li><input disabled="" type="checkbox"> 网易云音乐解锁</li>
<li><input disabled="" type="checkbox"> 网络唤醒测试（顺带学一下远程电脑，从虚拟机下手）</li>
<li><input disabled="" type="checkbox"> 一个好看的主题</li>
<li><input disabled="" type="checkbox"> 迅雷快鸟（不妨先搞清楚真正的作用？）</li>
<li><input disabled="" type="checkbox"> DDNS（远程访问路由器是它唯一的用处了么？）</li>
<li><input disabled="" type="checkbox"> nlbwmon</li>
</ul>
<h3 id="课堂"><a href="#课堂" class="headerlink" title="课堂"></a>课堂</h3><h4 id="CS-APP-计组"><a href="#CS-APP-计组" class="headerlink" title="CS:APP / 计组"></a>CS:APP / 计组</h4><p>计组需要应付下星期的测验，所以CS:APP课程要跟上，并且计组还有作业。</p>
<p>即使CS:APP不能完全替代计组，但看了看Lecture的各章名称，我能确认我没来错地方。</p>
<p>计组还有实验，也需要在本周末谨慎对待——嘶，这仅剩的一天，如何安排实在是令人头疼啊。</p>
<h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><p>尽快完成。</p>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>减少囫囵吞枣的行为，认真学一下新的内容，这是个考试课。</p>
<h4 id="物理实验"><a href="#物理实验" class="headerlink" title="物理实验"></a>物理实验</h4><p>物理实验开始堆积了，有必要提前写好预习报告，否则后面全天满课会很难受。</p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>这其实是个很有趣的课程，只是理论无聊了点。我想法还是先上JAVA Database再看课本吧——因为JAVA Database里也有学校课本的大部分内容。</p>
<h3 id="THO"><a href="#THO" class="headerlink" title="THO"></a>THO</h3><p>周六还是打算去吧，毕竟什么时候不忙呢？</p>
<h3 id="降低开销"><a href="#降低开销" class="headerlink" title="降低开销"></a>降低开销</h3><p>这个月开支实在有点大，尤其国庆几天，加上校园网到期了。能推到后面再买的东西就不用急着买了。另一个下手的方面是夜宵改成小方便面，晚餐可以像以前一样去饭堂。</p>
<h3 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h3><p>这个也属于要折腾很久的一类。写到这里，我觉得我需要研究一下自己——不是研究什么日程规划表什么作息之类的，而是研究自己。如何劝勉自己安心地去写LeetCode这样增强自己的事，来替换掉一些去B站消遣、去找涩图的行为，我觉得能行，但是没办到，那这就是一门学问了——鸡汤没用，威逼之下没有效率。什么样的模式才会适合我自己去做增强自身的行为？</p>
<hr>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>欢庆的十月，适宜的温度，总而言之最近是很适合生产力大爆发的时候，所以务必抓紧机会，走走之前计划的道路。早点休息，而在游戏咨询方面，我关注明日方舟，那就静待佳音吧。</p>
<p>总是想摸更多的鱼，但这么想的时候似乎已经忙到头上了。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>C++笔记[数组]</title>
    <url>/2020/11/23/c++%E7%AC%94%E8%AE%B0%5B%E6%95%B0%E7%BB%84%5D/</url>
    <content><![CDATA[<h2 id="数组的各种符号，摸清楚"><a href="#数组的各种符号，摸清楚" class="headerlink" title="数组的各种符号，摸清楚"></a><!-- more -->数组的各种符号，摸清楚</h2><hr>
<h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><img src="https://i.loli.net/2020/11/24/5hOA8Pt3DSMH7bf.png" style="zoom:125%;" />

<p>首先记住上图，[]表示数组取值运算符。地址可以“无限”加下去（有限的无限）</p>
<p>它们对应的代码是这样的：（main函数省略）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span> &lt;&lt; <span class="string">&quot;a表示&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*a表示&quot;</span> &lt;&lt; *a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a[0]表示&quot;</span> &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a[1]表示&quot;</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a+1表示&quot;</span> &lt;&lt; a + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a+6表示&quot;</span> &lt;&lt; a + <span class="number">6</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换数组首尾&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>

<h3 id="交换函数"><a href="#交换函数" class="headerlink" title="交换函数"></a>交换函数</h3><p>记住正常的交换函数，用指针从实质地指向值，与以前的区别在于，指针直接对应值，绕开了字母变量。也就是指针（十六进制地址）上有一个值（char,int,double等）</p>
<p>以下x,y是十六进制的地址，*x为指向的变量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T* x, T* y)</span> <span class="comment">//交换指针指向的变量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	T t = *x;<span class="comment">//t赋值为x指向的变量</span></span><br><span class="line">	*x = *y;<span class="comment">//将y的值赋给x</span></span><br><span class="line">	*y = t;<span class="comment">//y得到变量t的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里又想到取址符&amp;，那这样一来，以前的”int a= 5;”中a与值，与指针，之间是什么关系？</p>
<p>1.T* a与T a平级，没有依赖关系，定义时，均可以不初始化，而且对应量都是随机的（十六进制数0xcccccccc[???]和随机的T类型内容（但为什么每次都是固定的一个数呢？））</p>
<p>2.两者指向同一对象时，用&amp;联系起来。&amp;普通变量=变量的地址。</p>
<p>明白以上两点，数组就好理解了。交换地址上的值，实际上是以指针形式表达变量（因为指针也是变量），并进行着类似以前”int t = a,a =b, b=t;”的操作。而此处具体可以表达为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">普通变量的值 &#x3D; 指针1上的值</span><br><span class="line"></span><br><span class="line">指针1上的值 &#x3D; 指针2上的值</span><br><span class="line"></span><br><span class="line">指针2上的值 &#x3D; 普通变量的值</span><br></pre></td></tr></table></figure>

<p>完成交换。</p>
<p>▲注意交换完后，原数组会变化！</p>
<p>因此最好使用以下函数进行备份</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backup</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> p[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        p[i] = a[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//未试过能否运行，思路是这个就差不多了，遍历复制。</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="探索函数与数组的激烈摩擦"><a href="#探索函数与数组的激烈摩擦" class="headerlink" title="探索函数与数组的激烈摩擦"></a>探索函数与数组的激烈摩擦</h2><h3 id="数组在函数中的写法"><a href="#数组在函数中的写法" class="headerlink" title="数组在函数中的写法"></a>数组在函数中的写法</h3><p>就像指针在函数的参数位置，表达为T* m一样神奇，数组的首地址表达为T m[]</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_order</span><span class="params">(T m[],<span class="keyword">int</span> size)</span><span class="comment">//因为数组不能引用而只能用指针!!!</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = size / <span class="keyword">sizeof</span>(T);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= len; j++)</span><br><span class="line">			<span class="keyword">if</span> (m[i - <span class="number">1</span>] &lt; m[j - <span class="number">1</span>])</span><br><span class="line">				pin_swap(m + i - <span class="number">1</span>, m + j - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不要写T *m[]！！m[]本身就是个地址！如果这么干，你需要给它喂指针的地址（类型是T **，双星啊）（叶莲娜：“？”）</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p><strong>标识符</strong>是c++中由字母（A-Z，a-z）、数字（0-9）、下划线“_”组成，并且首字符不能是数字，但可以是字母或者下划线，例如”len = 10”中len就是标识符。<strong>指针也是标识符</strong>，指针有自己的地址。</p>
<p>下午使用选择排序函数+交换函数的顺序时，编译器最后一声轰鸣：“选择排序函数它找不到标识符！！”</p>
<p>查了下百度，当初我是不信的，后来把它们换了下顺序，程序duang的一下运行了，并且成功排序。</p>
<p><img src="https://raw.githubusercontent.com/Makri-hub/WolpersHome.github.io/PicGo/%E8%B0%83%E5%92%8C%E5%9B%BE%E7%89%87.png"></p>
<p>啊，用html调节图片好难受，远没有word功能多，原则上还是少用图片吧。</p>
<p>这期间借鉴了：</p>
<p><a href="https://blog.csdn.net/qq_41573234/article/details/80297995">HTML——添加图像、设置图像属性_时光·漫步的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/zfx1101804091/article/details/108749605">Typora关于 插入图片 居中 靠左 靠右设置_zfx1101804091的博客-CSDN博客_typora 图片居中</a></p>
<p>来帮助设置图片。</p>
<h3 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h3><p>以下这段关于字符数组的连接，出现了严重的问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">mystrcat</span><span class="params">(<span class="keyword">char</span>* strDest, <span class="keyword">const</span> <span class="keyword">char</span>* strSrc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="built_in">strlen</span>(strDest);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; strSrc[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((<span class="string">&#x27;A&#x27;</span> &lt;= strSrc[i] &lt;= <span class="string">&#x27;Z&#x27;</span> )|| (<span class="string">&#x27;a&#x27;</span> &lt;= strSrc[i] &lt;= <span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			*(strDest + n +i) = strSrc[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> strDest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题一：在c++中不能使用类似a&lt;=x&lt;=b、a&lt;x&lt;b这样的判断语句，拿a&lt;x&lt;b为例，c++中大小、等、不等判断符的<strong>结合性</strong>均为从左往右，判别式的逻辑是：</p>
<p>a&lt;x否？否，则化为0&lt;b；是，化为1&lt;b；</p>
<p>然后1&lt;b否？否，则为0；是，化为1。此处不再做过多赘述。</p>
<p>问题二：指针的移动没有处理好（具体点说，是这个int i不好用）            </p>
<p>在这里应该设置两个指针（或者两个自增变量），一个i，在strDest上移动，一个j，在strSrc上移动；而这里仅有一个i，无论如何都会自增，导致strSrc上的位置错误，显示是乱码变了（一个乱码汉字变成另一个乱码汉字，因为汉字对应的编码变了，但笔者还没学汉字的编码，只能先搁着之后再回来补充）</p>
<h3 id="指针和数组（待补）"><a href="#指针和数组（待补）" class="headerlink" title="指针和数组（待补）"></a>指针和数组（待补）</h3><p>如果有（main函数省略）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span>* p  = a;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>这是常见的操作，那么：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(p[<span class="number">1</span>] ==a[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p[1]表达意思与a[1]相同\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;p[1]值为：&quot;</span>&lt;&lt;p[<span class="number">1</span>]&lt;&lt;<span class="string">&quot;\na[1]值为：&quot;</span>&lt;&lt;a[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p[1]表达意思与a[1]不同&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>大家猜猜输出的是哪个？</p>
<p>答案是第一个，相同，对应值是都是5。</p>
<p>为什么“指针名[n]”可以表示“数组名[n]”，首先我认为数组a本身是个指针</p>
<p>而这个认识，就是二维数组的基础</p>
<p>这里留个坑，留下一张图给大家细细品味，注意“类型”一栏。</p>
<p><img src="https://raw.githubusercontent.com/Makri-hub/WolpersHome.github.io/PicGo/%E8%AF%A1%E5%BC%82.png"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++笔记</title>
    <url>/2021/05/31/C++%E7%AC%94%E8%AE%B0%5B%E6%95%A3%E8%AE%B0%5D/</url>
    <content><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><p>Warning: This passage includes wrong grammar, wrong words.</p>
<hr>
<p>How to understand pure virtual function and abstract class ?</p>
<p>We can’t always know the implementation of base class, for it’s just not sure before derivate classes define the functions to make that description. For instance, we define a base class Shape, but we can’t draw it before we define it’s real shape in a derivate class, Rectangle or Triangle. In this occasion, the base class didn’t initialize the parameters or functions on how to draw it, because none of the methods to initialization seems to be appropriate. We can’t just draw a default rectangle instead of letting users use derivate classes. Why not let users make a good use of derivate classes ?</p>
<hr>
<p>Which to choose?</p>
<p>There’s a template function containing arguments of type Double and type Float. Then I call the function and key 1.1 and 2.2 into it. Then what’s type of these two temporary arguments?</p>
<p>In fact, if you just do this, both arguments will be recognized as type Double. What about forcing the second argument into Float? That will go as you think : the second argument is successfully changed into Float.</p>
<p>In short, C++ Compiler regards decimals as Double at default, but you can force it into Float or Int.</p>
<hr>
<p>How to call Template Function directly without calling normal function I defined?</p>
<p>Just use this format:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">FunctionName&lt;&gt;(argument1, argument2);</span><br></pre></td></tr></table></figure>

<p>There’s nothing in &lt;&gt;, but this provides the hint for compiler to use the template function.</p>
<p>How to forcibly NOT call template function?</p>
<p>Easy. Just let the template have only one typename and two arguments in this same type, then key two different types of arguments in it. This will run well once you prepare the corresponding function you want to call.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mmax</span><span class="params">(T a, T b)</span><span class="comment">//I do NOT want to call this!!</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mmax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> b)</span><span class="comment">//And I want to call this instead!</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; mmax(<span class="number">1</span>,<span class="number">1.2222</span>);<span class="comment">//This is what I said &quot;key two different types of arguments&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>How to skip variable with <code>const</code> in class?</p>
<p>Use the Initialization Function when .</p>
<hr>
<p>Today I saw an <strong>AMAZING</strong> explanation of how to pass the size of an array.</p>
<p>@<a href="https://stackoverflow.com/questions/1328223/when-a-function-has-a-specific-size-array-parameter-why-is-it-replaced-with-a-p">https://stackoverflow.com/questions/1328223/when-a-function-has-a-specific-size-array-parameter-why-is-it-replaced-with-a-p</a></p>
<p>The function:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span> <span class="params">( <span class="keyword">char</span> a[<span class="number">100</span>] )</span></span>;</span><br></pre></td></tr></table></figure>

<p>Will have the parameter adjusted to be a pointer, and so becomes:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span> <span class="params">( <span class="keyword">char</span> * a )</span></span>;</span><br></pre></td></tr></table></figure>

<p>If you want that the array type is preserved, you should pass in a reference to the array:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span> <span class="params">( <span class="keyword">char</span> (&amp;a)[<span class="number">100</span>] )</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>C++ ‘03 8.3.5/3:</strong></p>
<blockquote>
<p>…The type of a function is determined using the following rules. The type of each parameter is determined from its own decl-specifier-seq and declarator. After determining the type of each parameter, any parameter of type “array of T” or “function returning T” is adjusted to be “pointer to T” or “pointer to function returning T,” respectively….</p>
</blockquote>
<p><strong>To explain the syntax:</strong></p>
<p>Check for “right-left” rule in google; I found one description of it <a href="http://www.cpp-home.com/archives/106.html">here</a>.</p>
<p>It would be applied to this example approximately as follows:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span> <span class="params">(<span class="keyword">char</span> (&amp;a)[<span class="number">100</span>])</span></span>;</span><br></pre></td></tr></table></figure>

<p>Start at identifier ‘a’</p>
<blockquote>
<p>‘a’ is a</p>
</blockquote>
<p>Move right - we find a <code>)</code> so we reverse direction looking for the <code>(</code>. As we move left we pass <code>&amp;</code></p>
<blockquote>
<p>‘a’ is a reference</p>
</blockquote>
<p>After the <code>&amp;</code> we reach the opening <code>(</code> so we reverse again and look right. We now see <code>[100]</code></p>
<blockquote>
<p>‘a’ is a reference to an array of 100</p>
</blockquote>
<p>And we reverse direction again until we reach <code>char</code>:</p>
<blockquote>
<p>‘a’ is a reference to an array of 100 chars</p>
</blockquote>
<p>Text above elaborately explains how the right-left works.</p>
<p>And I say that Notion is a quite good place for pasting codes and pages. It even retains the links (Hypertext) in pages that you copy.</p>
<hr>
<p>I don’t know how important on adding <code>this</code> to a base class which has derivate class until today. It is convenient for you to copy them directly to the derivate class without frequently adding <code>this</code> . But don’t do it in friend function.</p>
<p>Overloading of signal “=’ could <strong>NOT</strong> be declared as a friend function.</p>
<p>Declaration order of class</p>
<p>If vs show some problems on “see the declaration of class xx” and “xxx is not a member of class xx”, but actually xxx is a member of class xx, then you need to check whether your class xx includes other classes. If it does, make the included one declared in front of class xx.</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于评论区</title>
    <url>/2020/12/14/%E5%85%B3%E4%BA%8E%E8%AF%84%E8%AE%BA%E5%8C%BA/</url>
    <content><![CDATA[<p>其实很简单</p>
<a id="more"></a>

<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>第一步，安装，不过因为我中途更换了教程贴，所以我不大敢确定这一步是不是必要的，但我直觉它需要</p>
<p>cmd里面输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i --save gitalk</span><br></pre></td></tr></table></figure>

<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>第二步，开始之前我倒是想废话两句，Github上的教程卡在npm安装上了，import不太懂是什么情况，前面加了npm也没用。基于时间问题，只能去找找帖子。结果找了老半天，有swig安装，有ejs安装，直到我发现自己的文件格式跟他们都不一样，我是.njk。这里举几篇例子，但他们做得其实都不错。</p>
<p>其实呢，创建gitalk.swig的时候居然没发现，隔壁就有一个gitalk.njk，之后写这篇博客的时，回想起来，终于意识到网上版本是真的版本太久了，打开一看：</p>

<p>原来已经简化了，之前要添加的乱七八糟的，都在这里，不用添加了，那好，直接走起，注册去！</p>
<p><a href="https://github.com/settings/applications/new">点击这里进入Github OAuth注册</a></p>
<p>注册的同时，和其他教程一样，修改.\theme\主题\下的_config.yml即可，详细描述参考上面的四篇教程就足够了，这里不再赘述。</p>
<h2 id="2022-1-22："><a href="#2022-1-22：" class="headerlink" title="* 2022/1/22："></a>* 2022/1/22：</h2><p>Gitalk出现了Error: Request failed with status code 403，原因似乎是反向代理有关，不太了解。<br>但要解决问题可以看看<a href="https://umm.js.org/p/1d1d49e9/">这个</a>博客，确实是一用就生效。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>c++笔记[结构体]</title>
    <url>/2020/11/29/c++%E7%AC%94%E8%AE%B0%5B%E7%BB%93%E6%9E%84%E4%BD%93%5D/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><p>这是第二篇c++笔记，原因是写在纸质笔记本上我并不会去看，写得慢还写得很乱<del>写在博客你可能也不会去看</del>。</p>
<p>这一次是结构体，为什么连这个都要写呢？因为结构体里会有比较多容易混淆的东西，就比如我以为<code>struct</code>是可以换成别的东西，而没有认识到这是个关键字</p>
<p>而我刚开始就是轻视了这一块，独自去编译器里探索</p>
<p>探索了个寂寞</p>
<p>再然后，只能老老实实看老师的视频</p>
<p>在此写下笔记，以记录一些易忘点、易漏点，以及一些认识结构体的关键突破点。</p>
<h3 id="结构体“复制”"><a href="#结构体“复制”" class="headerlink" title="结构体“复制”"></a>结构体“复制”</h3><p>当且仅当两个结构体类型相同时，才可以相互赋值。成员未初始化值的，在函数（包括main函数）外默认为0，否则为伪随机值（存储单元的值）。</p>
<p>这种赋值也叫位拷贝，即按位拷贝，逐位逐位地拷贝（其实只是和值拷贝区分）</p>
<h3 id="结构体作形参"><a href="#结构体作形参" class="headerlink" title="结构体作形参"></a>结构体作形参</h3><p>结构体的<strong>成员</strong>在函数中作为参数时，有三种方法可以将其“导入”</p>
<p>一是用“类型+变量名”，得到一份copy，不操作原变量，函数内的拷贝操作完即销毁，存在开销大、用途有限（比如我只是想把数据拿出来看看，不对数据进行操作），缺点明显。</p>
<p>二是用指针，也就是结构体的首地址，拿根针在结构体的某个成员上移来移去表示对应的值，缺点是不够直观。</p>
<p>三是使用引用，对，这是福音，结构体可以使用引用，操作起来跟main函数内部没什么两样。当然了，会改变原结构体的信息，注意备份。</p>
<p>第三种在平常操作中很推荐，不过如果仅仅是打印、得出结论，不想改变原数据，那么第一种可以尝试。</p>
<p>初学还是建议<strong>非必要情况不要使用第一种</strong>。第二种为了练习指针的话，也浅尝辄止。</p>
<p>1.4</p>
<p>结构体中一般<strong>不考虑</strong>成员顺序对结构体<strong>占用字节</strong>的影响，而更加考虑代码的可维护性。至于代码的可维护性，局部的代码不太能阐述这件事情。成员顺序不同，结构体占用字节也有所不同，其原因是<strong>字节对齐</strong>。</p>
<p>有关字节对齐，只要知道对齐是为了机器读取方便而进行的一种操作就可以了。</p>
<h3 id="关于new和delete"><a href="#关于new和delete" class="headerlink" title="关于new和delete"></a>关于new和delete</h3><p>形如new int、new double、new char(‘a’)，会开辟空间并返回地址，用<strong>delete 地址</strong> 来删除。</p>
<p>形如new int [10]、new char [20]等等，会开辟数组（包括字符数组）并返回数组首地址，用<strong>delete 首地址</strong>来删除</p>
<p>具体使用：*int p = new 类型[(初值)] [长度];</p>
<p>delete p;</p>
<h4 id="关于delete之后"><a href="#关于delete之后" class="headerlink" title="关于delete之后"></a>关于delete之后</h4><p>delete后，指针p仍存在，仅仅是”new 类型[(初值)] [长度] “不见了。</p>
<p>这个指针可以通过p=nullptr清理回收。</p>
<p>这里强调一下，用nullptr，不用0，也不用NULL，nullptr是为了避免0和NULL在指针上产生问题而生的，用它就没错，而以后进一步学习，再来区分NULL、0、nullptr三者区别。</p>
<h4 id="值得注意的delete-数组"><a href="#值得注意的delete-数组" class="headerlink" title="值得注意的delete []数组"></a>值得注意的delete []数组</h4><p>删除数组如果使用</p>
<p>注意，new的存储单元在运行时堆上，默认为随机值</p>
<p>头指针head:在结构体定时，最后一个成员后面，加上一个指针，便可以把每个具体的结构体连接起来</p>
<p>（请注意这仅仅是思想，具体步骤，请看Part II）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一段伪代码，visit和next均为特定的操作，并非c++内置。</span></span><br><span class="line">Student* p =head;</span><br><span class="line"><span class="keyword">while</span>(p)<span class="comment">//也就是p不为NULL时，就继续循环。结构体的最后一个是NULL。</span></span><br><span class="line">&#123;</span><br><span class="line">    visit(p);</span><br><span class="line">    p=p-&gt;next;<span class="comment">//走向下一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>有BUG的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Student&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Student* p = &amp;s;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; p-&gt;No &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p-&gt;Name &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p-&gt;score[<span class="number">0</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p-&gt;score[<span class="number">1</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p-&gt;score[<span class="number">2</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p[i].score[<span class="number">0</span>] + p[i].score[<span class="number">1</span>] + p[i].score[<span class="number">2</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//p是由s开始的结构体的（亦是首地址），后面调用时为s1</span></span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>问题发现了；指针隔着跳了，结果总分是第1、3、5名的，显示在1 2 3名的总分上，而4 5名的总分是第7 9名的，并不存在，显示为0和-nan。-nan意为Not a Number，即NaN。<br>具体体现为，i=3时，p便已经在s5上了。<br>问题又来了，指针为什么会跳呢?<br>观察发现，input()和output()表示分数的方式，不一样，input()为p-&gt;score[数字]格式，output()的总分为p[i].score[数字]格式。<br>调试中看到，有关p[i]的描述在第四名和第五名上，都是错误的，没有指向正确对象。<br>再联想下，p和i都是每次循环自增1，在仅仅循环一次的情况下，怎么样才能让p移动2呢？那就是p和i同时增加1了，代码中确实有这个操作。<br>那问题就解决了，表示分数p自增1即可，跟i没有实质上的关系，i是个计数用的。<br>这应该是源于习惯问题，习惯上用计数器作移动的指标。<br>结果碰上格式混用，前面一部分纯指针，用-&gt;，没出问题，后一半用p[i]，出问题了，双倍自增。<br>于是去掉[i]，换用(<em>p)即可。（注意”.”运算符比”</em>“运算符优先级高，括号不能去掉，否则是”地址.成员”，而正确格式是”结构体.成员”）</p>
<p>所以把总分的显示格式与i无关化即可，随便选择一种格式均可。如p-&gt;score[0]，(*p).socre[0]。</p>
<p>这里另外一提，目前见过好几次while(变量)的结构，也就是等待变量归零再退出循环，常见的有：变量最终归为链表的最后一节nullptr。不过不知怎么的，虽然能用，感觉这么用相当不规范，而且首次见到可能不大好理解——while(next!=0)比这个好理解多了。老师的视频里出现了这种写法，暂且视作规范吧。（或许这就是简化的写法吧）</p>
<hr>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>这是我个人给它的一个定义，给一个可用、实用的链表下的一个定义。</p>
<p>链表有三个要素：头指针（用于寻找数据位置），其他成员（用于数据储存），节点指针（形成链表的前提）。</p>
<p>整体来看，链表包括头指针、成员、节点指针和尾指针（一般值为nullptr，当然，你想做头尾相接的也行）；而从结构体的角度来看，链表由一or多个结构体组成，链表中每个结构体尾部都有一个指针指向下一个结构体。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>整体思想：每建立一个结构体，都让尾指针“next = new 结构体类型”；复制头指针，让这个复制的指针在链表上移动，以取得自己想要的数据。</p>
<p>具体操作，举例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> No;</span><br><span class="line">    <span class="keyword">char</span> Name[<span class="number">20</span>];<span class="comment">//名字最多9个汉字</span></span><br><span class="line">    <span class="keyword">double</span> score[<span class="number">3</span>];<span class="comment">//三门成绩</span></span><br><span class="line">    Student* next;<span class="comment">//节点指针，如果这个链表到尾部了，那么这是尾指针（暂时只考虑单向链表，也就是从头走到尾的）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student ChainList;<span class="comment">//先在运行时栈创建一个结构体，其实head = new Student也可以</span></span><br><span class="line">    Student* head = ChainList;<span class="comment">//获取头指针</span></span><br><span class="line">    ---录入数据---（链表操作在后面说，先创建，才能操作）</span><br><span class="line">    head.next = <span class="keyword">new</span> Student;<span class="comment">//在运行时堆里new一个新的空结构体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里，虽然我们只创建了含两个结构体的链表，而且第二个还是空的，但接下来的事，其实也就在重复以上的操作</p>
<p>这就是连续输入数据。</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="结构体作形参-1"><a href="#结构体作形参-1" class="headerlink" title="结构体作形参"></a>结构体作形参</h4><p>创建函数时，十分<strong>建议引用</strong>，但指针也不差。所以刚刚上面给出了两种创建方式：在运行时栈里创建and运行时堆里创建。</p>
<p>前一种可以有名字，调用函数时，参数位置直接填写链表名，在函数里使用“链表名.成员= 想要赋的值”完事（也就是第一个结构体的名称，上例为ChainList，则如果我想录入分数，只需要：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ChainList.score[<span class="number">0</span>]=第一门成绩;</span><br><span class="line">ChainList.score[<span class="number">1</span>]=第二门成绩;</span><br><span class="line">ChainList.score[<span class="number">2</span>]=第三门成绩;</span><br></pre></td></tr></table></figure>

<p>（其中，点”.”是成员运算符，接下来的“-&gt;”是指向运算符）</p>
<p>后一种写个指针，然后input函数中使用“head-&gt;成员=想要赋的值”的格式给成员赋值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">head-&gt;score[<span class="number">0</span>]=第一门成绩;</span><br><span class="line">head-&gt;score[<span class="number">1</span>]=第二门成绩;</span><br><span class="line">head-&gt;score[<span class="number">2</span>]=第三门成绩;</span><br></pre></td></tr></table></figure>

<p>但接下来两点才是重点。</p>
<p>①为了链表可以重复操作，你必须额外再创建两个指针，分别用于在链表的头指针处和最前端处，不妨先叫它们：moving_pointer和pioneer_pointer（移动指针和先锋指针，当然，是我瞎编的）。其中moving_pointer初值为head，并且在每次操作完链表后，加一句moving_pointer = head，将其值自动归为头指针的地址，以备下一次使用；另一个pioneer_pointer，一般为最后一个结构体的头指针，而在每次创建一个结构体时，更新为尾指针，然后获得的返回值，再次成为最后一个结构体的头指针，即</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pioneer_pointer = pioneer_pointer-&gt;next;</span><br><span class="line">pioneer_pointer = <span class="keyword">new</span> Student;</span><br></pre></td></tr></table></figure>

<p>一般接着输入函数，请看例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//插入新的学生信息</span></span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[添加]请输入学生信息：\n&quot;</span>;</span><br><span class="line">		input(stu);</span><br><span class="line">		n++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[添加]请输入学生信息：\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">		(*p).next = <span class="keyword">new</span> Student;<span class="comment">//此处的p即为pioneer_pointer</span></span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		input(*p);</span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> (moving_pin == <span class="literal">nullptr</span>)head = p;</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>为什么需要它们？想一想，第一次输入完成时，对于引用型函数来说，下一次应该在它的参数位置填什么？还是ChainList吗？</p>
<p>显然不是。</p>
<p>上面代码的input()函数就是引用型的，我更换成了*p（先锋指针作为最后一个结构体的头指针，那么*p发挥了类似ChainList的作用），不然的话，下一次赋值将直接覆盖第一次的数据，并没有形成链表</p>
<p>②</p>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>类似于input()函数，只不过关于char字符数组的部分，需要用strcpy_s(字符串1,字符串2)。这里不知道为什么strcpy()不行，会报错，而strcpy_s()没有这个问题，以下input()函数仅供参考：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(Student&amp; v_stu)</span><span class="comment">//我也忘记v是什么意思了，virtual?但形参是parameter。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; v_stu.No &gt;&gt;v_stu.Name&gt;&gt; v_stu.score[<span class="number">0</span>] &gt;&gt; v_stu.score[<span class="number">1</span>] &gt;&gt; v_stu.score[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="插入、删除"><a href="#插入、删除" class="headerlink" title="插入、删除"></a>插入、删除</h4><p>这里只简略说明下思路，代码放到另一篇文章里了（参考篇）。</p>
<p>插入，因为暂时不需要排序，所以每次往new出来的新空间里input就可以了（有排序那另说，其实也只不过是next指针的调换）。</p>
<p>删除，要分三种情况</p>
<p>一是去头，二是去尾，三是去中间。去头需要调动头指针，让头部往后挪；去尾在删掉数据后，让倒数第二个结构体的next指向新的空间即可；去中间，将前一个结构体的next指针赋值为将要被删的结构体的next指针，然后删除想删除的结构体成员即可。（将要被删除结构体的next指针其实就是它下一个结构体的头指针，这样就依然可以连起来）</p>
<h4 id="交换顺序"><a href="#交换顺序" class="headerlink" title="交换顺序"></a>交换顺序</h4><p>参考数组排序的做法即可，就是指针交换那儿有点绕，多想想就好。</p>
<p>具体一点，我的方法是选择排序，一定一动，定与动比较，需要交换时，我们假设个结构体a和b吧，先给个中间变量t（是指针），先让t= a.next,再使a.next = b.next,最后b.next = t，（）</p>
<p>选择排序，冒泡排序，目前我就学了这两种，而我还需要学八种。先放上典图。</p>
<p><img src="https://raw.githubusercontent.com/Makri-hub/WolpersHome.github.io/PicGo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201211173838.png"></p>
<p>我也并不急于去理解它们，等到了时候再说吧。这里上代码，看起来就像把平面图形拉成了立体图形。（其实就是多输入几个）</p>
<p>这里给出的代码，要注意，我是另外备份了一个链表来排序的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_not_including_pin</span><span class="params">(Student&amp; a, Student&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Student T;<span class="comment">//中间变量</span></span><br><span class="line">	strcpy_s(T.Name, a.Name); T.No = a.No; T.score[<span class="number">0</span>] = a.score[<span class="number">0</span>]; T.score[<span class="number">1</span>] = a.score[<span class="number">1</span>]; T.score[<span class="number">2</span>] = a.score[<span class="number">2</span>];<span class="comment">//T = a</span></span><br><span class="line">	strcpy_s(a.Name, b.Name); a.No = b.No; a.score[<span class="number">0</span>] = b.score[<span class="number">0</span>]; a.score[<span class="number">1</span>] = b.score[<span class="number">1</span>]; a.score[<span class="number">2</span>] = b.score[<span class="number">2</span>];<span class="comment">//a = b;</span></span><br><span class="line">	strcpy_s(b.Name, T.Name); b.No = T.No; b.score[<span class="number">0</span>] = T.score[<span class="number">0</span>]; b.score[<span class="number">1</span>] = T.score[<span class="number">1</span>]; b.score[<span class="number">2</span>] = T.score[<span class="number">2</span>];<span class="comment">//b = t;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对比下简单变量的交换，就明白上面是什么意思了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_not_including__pointer</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    T = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上，写得比较菜，定有疏漏之处，还恳请各位轻喷。比如链表的那两个“必须额外再复制两个指针”是否可以简化点思路？是否尝试过复制结构体的方法？</p>
<p>文章实质上可能是期末复习笔记之类的，凑合着像一篇教程</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML笔记</title>
    <url>/2021/04/05/html%E5%B0%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="# 序言"></a># 序言</h1><p>每一点内容均有例子，尽量清晰地讲诉每一个常见符号的作用。如果你想查询某个符号，请看边栏，或者前往W3C、<a href="https://www.tutorialspoint.com/html/index.htm">tutorialspoint</a>。文章附带了新手理解层面的一些见解，有所不周，还请见谅。</p>
<p>Hypertext Markup Language，简称HTML，是世界上最广泛用于编写网页的语言。</p>
<blockquote>
<p>Hypertext是一种网页连接方式（类似word中的超文本），网页上可以点击的连接其实就是Hypertext（超文本）</p>
<p>Html是标记语言，也就是用带标记（Tag）的文字告诉网页如何架构其显示内容的一种语言<del>（其实我更想叫它标签语言，但入乡随俗了）</del></p>
</blockquote>
<p>应用：网页页面，网页导航，跨平台UI，离线阅读，游戏开发</p>
<p>与html密切相关：javascript,php,angular。在此栽下一棵树。</p>
<h1 id="第一个网页"><a href="#第一个网页" class="headerlink" title="第一个网页"></a>第一个网页</h1><p>猜猜会是谁？当然是大家喜闻乐见的Hello World了！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Is this a descrption for document?<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is the first website by Makri_BW<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你没有合适的HTML代码展示平台，可以点击<a href="http://tpcg.io/v5h38Z3B">这里</a>查看效果</p>
<p>下面一一解释上文所用Tag的作用</p>
<table>
<thead>
<tr>
<th>序号Sr.No</th>
<th>标记Tag</th>
<th>描述Description</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>&lt;!DOCTYPE html&gt;</td>
<td>Document Type 规定文本类型和HTML版本的标记，这里规定的文本类型即html</td>
</tr>
<tr>
<td>2</td>
<td>&lt;html&gt;</td>
<td>包含完整的HTML文本，主要由文本头（暂不理是什么，用&lt;head&gt;&lt;/head&gt;&gt;表示）和文本体（即文本内容，用&lt;body&gt;&lt;/body&gt;表示）</td>
</tr>
<tr>
<td>3</td>
<td>&lt;head&gt;</td>
<td>可以存放&lt;title&gt;&lt;link&gt;等HTML标记</td>
</tr>
<tr>
<td>4</td>
<td>&lt;title&gt;</td>
<td>如上提及，在&lt;head&gt;内部.</td>
</tr>
<tr>
<td>5</td>
<td>&lt;body&gt;</td>
<td>存放&lt;h1&gt;&lt;div&gt;&lt;p&gt;等标记</td>
</tr>
<tr>
<td>6</td>
<td>&lt;h1&gt;</td>
<td>heading 1 一级标题，以此类推，&lt;h2&gt;是二级标题。</td>
</tr>
<tr>
<td>7</td>
<td>&lt;p&gt;</td>
<td>Paragraph，自然段</td>
</tr>
</tbody></table>
<h2 id="lt-DOCTYPE-gt-声明标记"><a href="#lt-DOCTYPE-gt-声明标记" class="headerlink" title="&lt;!DOCTYPE&gt;声明标记"></a>&lt;!DOCTYPE&gt;声明标记</h2><p>作用是供浏览器理解HTML版本</p>
<h2 id="标题标记"><a href="#标题标记" class="headerlink" title="标题标记"></a>标题标记</h2><p>&lt;h1&gt;为一级标题，&lt;h2&gt;为二级标题，依此类推到。一级标题最大，六级标题最小，超过六级会变成与大小相当的文字。至于有无标题作用，我们以后讨论。</p>
<h2 id="自然段标记"><a href="#自然段标记" class="headerlink" title="自然段标记"></a>自然段标记</h2><p>&lt;p&gt;&lt;/p&gt;所包含内容即为一个自然段。</p>
<h3 id="lt-br-gt-换行标记"><a href="#lt-br-gt-换行标记" class="headerlink" title="&lt;br /&gt;换行标记"></a>&lt;br /&gt;换行标记</h3><p>&lt;br /&gt;即line break，可在&lt;p&gt;&lt;/p&gt;中使用，以达到自己想要的目的。</p>
<h3 id="lt-center-gt-lt-center-gt-居中标记"><a href="#lt-center-gt-lt-center-gt-居中标记" class="headerlink" title="&lt;center&gt;&lt;/center&gt;居中标记"></a>&lt;center&gt;&lt;/center&gt;居中标记</h3><p>&lt;center&gt;&lt;/center&gt;，在&lt;p&gt;&lt;/p&gt;之外中使用，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>This is name of the page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Centring the content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">p</span>&gt;</span>We Are the Center of Galaxy<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>建议读者亲自敲一下以上代码，熟悉一下格式，也可以<a href="http://tpcg.io/Vi9qHr20">点击此处查看效果</a>。</p>
<h3 id="lt-hr-gt-分割线"><a href="#lt-hr-gt-分割线" class="headerlink" title="&lt;hr /&gt;分割线"></a>&lt;hr /&gt;分割线</h3><p>本身叫Horizontal Lines，缩写hr。在各大论坛中和贴主们形影不离的存在。视觉上既有强制分隔的作用，又有装饰作用。来看看<a href="http://tpcg.io/oL7KsUG5">这个</a>例子，加深体会</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>This is name of the page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Centring the content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">p</span>&gt;</span>We Are the Center of Galaxy<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>读到这里，你应该早发现了<strong>&lt;br /&gt;**换行标记和</strong>&lt;hr /&gt;<strong>分割线标记似乎是</strong>同一类型<strong>的。它们没有其他标签那样的开始、结束标签（譬如&lt;p&gt;和&lt;/p&gt;)，格式为&lt;xx /&gt;，标签名和斜杠之间有空格。它们有一个共同的名字，叫做</strong>置空元素<strong>，俗称</strong>空标签**。以后你还会遇到很多相当有趣的空标签。</p>
<h3 id="lt-pre-gt-lt-pre-gt-格式保护"><a href="#lt-pre-gt-lt-pre-gt-格式保护" class="headerlink" title="&lt;pre&gt;&lt;/pre&gt;格式保护"></a>&lt;pre&gt;&lt;/pre&gt;格式保护</h3><p>全名Preserve Formatting。在HTML中打一段代码，经常要换行，老是&lt;br /&gt;来&lt;br /&gt;去，相信你会感到十分繁琐。所以&lt;pre&gt;&lt;/pre&gt;之间的文字排版格式会被保留下来，就像txt一样，&lt;br /&gt;这样的标记，你不需要单独去打了，而且这样你的内容会非常直观，就像看源代码一样。</p>
<p>具体<a href="http://tpcg.io/76TScrhN">例子</a>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>This is name of the page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">hr</span> /<span class="attr">N</span></span></span><br><span class="line">		    &lt;p&gt;We are going to show you some codes below&lt;/p&gt;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">center</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">def Func()</span><br><span class="line">&#123;</span><br><span class="line">    print(&quot;你好&quot;)</span><br><span class="line">&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你尝试不使用&lt;pre&gt;&lt;/pre&gt;，那么需要加4个&lt;br /&gt;。越是长的代码，越能体现&lt;pre&gt;&lt;/pre&gt;格式保护的优势。</p>
<h3 id="amp-nbsp-不换行的空格"><a href="#amp-nbsp-不换行的空格" class="headerlink" title="&amp;nbsp;不换行的空格"></a><strong>&amp;nbsp</strong>;不换行的空格</h3><p>全称Nonbreaking space，强制不换行的空格，这一点针对带空格的书名、报名、人名等，英文中使用得比较多。</p>
<p>给出<a href="http://tpcg.io/OhhfWR">例子</a>，调成Mobile&nbsp;320*568之后，可见整个<em>12 Angry Men</em>都推到了下面，<strong>以此防止重要内容断开</strong>。</p>
<p>建议读者去掉代码中的&amp;nbsp;之后，再试一次，看看有何异同。</p>
<h2 id="区分“标记”和“元素”"><a href="#区分“标记”和“元素”" class="headerlink" title="区分“标记”和“元素”"></a>区分“标记”和“元素”</h2><p>标记分为开始标记和结束标记，而元素是标记+包含的内容，</p>
<blockquote>
<p>比如：</p>
<p>&lt;p&gt;是开始标记&lt;/p&gt;是结束标记，</p>
<p>&lt;p&gt;This is the content between the opening tag and closing tag&lt;/p&gt;则是一个元素</p>
</blockquote>
<h1 id="第二个网页"><a href="#第二个网页" class="headerlink" title="第二个网页"></a>第二个网页</h1><p>我们补充几个常用符号，通过上面的学习，相信下面内容读起来，你再熟悉不过了。</p>
<p>下划线：&lt;u&gt;&lt;/u&gt;</p>
<p>斜体：&lt;i&gt;&lt;/i&gt;</p>
<p>加粗：&lt;b&gt;&lt;/b&gt;或&lt;strong&gt;&lt;/strong&gt;</p>
<p>引用：</p>
<p>Ⅰ.&lt;blockquote&gt;&lt;/blockquote&gt;，引用一大段话，与&lt;p&gt;&lt;/p&gt;同级，作为一个自然段，会居中显示。</p>
<p>Ⅱ.&lt;q&gt;&lt;/q&gt;，引用一小句话，位于&lt;p&gt;&lt;/p&gt;等之内，作用不明显。</p>
<p>（还有个&lt;div&gt;&lt;/div&gt;，因为跟CSS挂钩，所以在此先不作要求，等到CSS篇再细说）</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>原名Attributes，用于修饰标记的内容，由“键值对”构成（打双引号使因为像，但并不完全是键值对），常常放在<strong>开始标记</strong>(Opening Tags)中，常见的由align（对齐）、title（光标提示，光标浮在标记内文字上面时，会显示提示，俗称tooltip，下面会详细演示）、style（css相关的风格设置，有颜色、对齐等等）、dir（文字方向，阿拉伯文是从右到左读的，dir因此而生）</p>
<h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>浏览网页的时候，相信你有见过将鼠标放在某些地方，那里就会冒出一些提示来，这就是属性title，下面看个<a href="http://tpcg.io/jF86OmIh">例子</a>立刻明白：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>The title Attribute Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">title</span> = <span class="string">&quot;Hello HTML!<span class="symbol">&amp;#x0a;</span>这就是提示，也叫Tooltip&quot;</span>&gt;</span>Float your cursor here<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里放了个&amp;#x0a;是啥意思？其实是想让你先亲自去试试，那是个换行符。你会问为何不用&lt;br /&gt;？可以参考下面的解释，但实际上我对自己的搜索并不满意，我还是不清楚为何title属性中的字符串不能用&lt;br /&gt;——目前只是解释为不合语义；希望看到这里的各位爷指出问题关键，帮帮我这个菜鸡。</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/26093623/br-not-working-in-title-tag-for-tooltip">https://stackoverflow.com/questions/26093623/br-not-working-in-title-tag-for-tooltip</a> &lt;br /&gt;在title属性中不起作用</p>
<p><a href="https://stackoverflow.com/questions/1726073/is-it-sometimes-bad-to-use-br">https://stackoverflow.com/questions/1726073/is-it-sometimes-bad-to-use-br</a>  什么时候不该用&lt;br /&gt;？</p>
</blockquote>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>格式：&lt;!– 注释内容 –&gt;</p>
<p>作为一个html编辑者，自然要在交流过程中对自己的代码写下一些注释。</p>
<p>请注意这个交流的对象<strong>不仅仅是他人</strong>，还有<strong>未来的你</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Multiline Comments<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">	  <span class="comment">&lt;!--This is the end of tag &lt;head&gt;&lt;/head&gt; --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">         This is a multiline comment and it can</span></span><br><span class="line"><span class="comment">         span through as many as lines you like.</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Document content goes here.....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--End of this html tag--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- And you can see that spaces </span></span><br><span class="line"><span class="comment">   are not required to both tags of comment--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查看<a href="http://tpcg.io/GQEicU9X">效果</a></p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>格式： &lt;img src = “图片路径或网址，即图片直链” alt = “Test Image” /&gt;</p>
<p>这个很新鲜了吧？经过前面枯燥的学习，终于有点好康的东西了。</p>
<p>我们来一一解释：img src即image source，图片来源，一般后边的双引号里是图片路径，以.png、.jpeg结尾居多，有两种表示方式：</p>
<details><summary>①绝对“路径”</summary>其实是互联网上的图片链接，比如：
    <blockquote>https://i.loli.net/2019/12/30/e9th3ZPN5CAOFoV.png</blockquote>
    <blockquote>https://inews.gtimg.com/newsapp_ls/0/13249243546/0</blockquote>
嘛，为什么说“一般”，第二个链接就可以看出来了，您尽可打开看一看，至少笔者在写时这俩图片的图床都没有爆炸。
</details>

<details><summary>②相对路径</summary>以"/"起头，以为以你现在的网页为零点，进入"/"后的路径进行图片的读取。<br /><br />这一点对一个大型网站来说十分有用，在节省代码量的同时减少了访问其他网站（如不属于本网站的图床网站）的机会，维护起来更稳定——万一哪天图床变了、炸了，或者是你的网址变了，使用绝对路径的你会发现，网页里的图全崩了。<br /><br/>具体到某一个网站，我们可以用github来举例。如果你的respiratory既做博客网站的存放点，同时也储存了图片，那么就可以使用相对路径，访问respiratory的图片。<br /><br />我的博客文件储存在：https://github.com/RH-Xie/RH-Xie.github.io/<br /><br />
那么我想展示一下我的头像：（可能要代理才能看到）<br />
<src img= "https://github.com/RH-Xie/RH-Xie.github.io/blob/master/images/20201108230401.jpg" alt = "MyIcon" />
</details>

<p>alt为alternate text，替代文本。当<strong>图片显示不出</strong>的时候，浏览器就会在图片位置放上一个表示“图片”的小图标和alt后双引号内的文字，以示此处原应有图，因为访问超时而<strong>获取不到图片</strong>。如果你没有开github的代理，那么你有可能在上面的“相对路径”里就见到这个了</p>
<p>查看<a href="http://tpcg.io/9KkHGq">效果</a>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Using Image in Webpage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Simple Image Insert<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;/html/images/test.png&quot;</span> <span class="attr">alt</span> = <span class="string">&quot;Test Image&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="图片跳转"><a href="#图片跳转" class="headerlink" title="图片跳转"></a>图片跳转</h3><p>在论坛的的顶部，我们常常见到有该论坛的图标，点击它们，一般会返回到论坛的主页。而我们只要把上述的图片与超链接结合起来，就可以得到这样的功能。在各大下载站点的广告也常有应用。</p>
<p>这里依然以mcbbs为例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>An example of Image Link<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Click the picture below<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;https://www.mcbbs.net&quot;</span> <span class="attr">target</span> = <span class="string">&quot;_self&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;https://www.mcbbs.net/template/MCBBS_v3/image/logo.png&quot;</span> <span class="attr">alt</span> = <span class="string">&quot;The Icon of MCBBS(CN)&quot;</span> <span class="attr">border</span> = <span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="http://tpcg.io/iS7hQwU5">查看效果</a></p>
<p>这里的&lt;a&gt;&lt;/a&gt;全名为anchor，原意为“锚”，可以引申为“导航”，是专门用于展示可点击链接的地方。关于它的属性不只有href，但href十分常用。href全名为html reference，即网页引用，后面跟一个url链接（网页的链接，Uniform Resource Locator，通俗来讲就是<strong>网址</strong>）。</p>
<p>alt标签，不是键盘上的ALT！其全名<code>alternative</code>，<strong>可替代的文字</strong>。当图片显示不出时，就会显示这些文字，不过链接依然能跳转（一般来说）。</p>
<p>还有几个常用的属性：download，指定下载文件的文件名；target，指定以什么方式打开新的网页，如_self在本网页跳转只下个网页，_parent、_top、_blank则是打开新窗口以访问网页。具体区别建议谷歌，这里不作区分</p>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p>类似图片，多了一点属性。其实这个不需要专门去学，知道一下几个属性即可，因为在一般的视频网站“分享”下回直接有html源码让你复制到html文件中。</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">src</td>
<td align="center">视频源链接，一般只有播放器，没有评论、点赞之类的按键</td>
</tr>
<tr>
<td align="center">width</td>
<td align="center">视频宽度，可以填像素，也可以填占窗口的百分比</td>
</tr>
<tr>
<td align="center">height</td>
<td align="center">视频高度，同理</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">在javascript中用于引用元素</td>
</tr>
<tr>
<td align="center">marginheight</td>
<td align="center">边缘高度</td>
</tr>
<tr>
<td align="center">marginwidth</td>
<td align="center">边缘宽度</td>
</tr>
</tbody></table>
<p>演示代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;501616931&amp;bvid&#x3D;BV1rN411R7XQ&amp;cid&#x3D;294474330&amp;page&#x3D;1&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot;&gt; &lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure>

<p>由于B站视频现在是自动播放的，以防其发出不必要的巨响，请读者自行尝试将代码嵌入到编辑器中调试</p>
<h1 id="第三个网页"><a href="#第三个网页" class="headerlink" title="第三个网页"></a>第三个网页</h1><p>以上，我们分别认识了HTML的文字处理和一些常用的部件，那么接下来应该整体规划一下我们的<strong>网页布局</strong>了。事实上现在设计者更倾向于使用CSS和Javascript来设计布局，而这里只是以HTML作引导，为上述两者铺基础，以便之后学习CSS和Javascript时不会吃力。</p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格，一种具有布局性质的零部件。</p>
<p>下面是一个简单的表格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">        	&lt;title&gt;一个简单的表格&lt;&#x2F;title&gt;</span><br><span class="line">        &lt;&#x2F;head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">            &lt;table border &#x3D; &quot;1&quot;&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;商品名&lt;&#x2F;th&gt;</span><br><span class="line">                    &lt;th&gt;价格&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;榨汁机&lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;td&gt;35&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;菜刀&lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;td&gt;50&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;&#x2F;table&gt;</span><br><span class="line">	&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>展示效果：</p>
<!DOCTYPE html>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;一个简单的表格&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;table border = &quot;1&quot;&gt;
            &lt;tr&gt;
                &lt;th&gt;商品名&lt;/th&gt;
                &lt;th&gt;价格&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;榨汁机&lt;/td&gt;
                &lt;td&gt;35&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;菜刀&lt;/td&gt;
                &lt;td&gt;50&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
&lt;/html&gt;</code></pre>
<p>你只需要记住</p>
<ul>
<li>tr = Table Row，即表格的一行；</li>
<li>th = Table Heading（或Table Header，记住就行）会稍显粗一点；</li>
<li>td = Table Data，表格数据。</li>
</ul>
<p>认识到html中表格是<strong>以行(Row)为单位</strong>的即可，即一行一个&lt;tr&gt;&lt;/tr&gt;，东西全在里面了。</p>
<p>如果你发现这个表格太胖了，那么给table来个属性<code>width</code>和<code>height</code>，让它限制一下大小：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span> = <span class="string">&quot;像素或者百分比&quot;</span> <span class="attr">height</span> = <span class="string">&quot;像素或者百分比&quot;</span> <span class="attr">border</span> = <span class="string">&quot;1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<!DOCTYPE html>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;一个简单的表格&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;table width = &quot;200&quot; height = &quot;100&quot; border = &quot;1&quot;&gt;
            &lt;tr&gt;
                &lt;th&gt;商品名&lt;/th&gt;
                &lt;th&gt;价格&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;榨汁机&lt;/td&gt;
                &lt;td&gt;35&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;菜刀&lt;/td&gt;
                &lt;td&gt;50&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
&lt;/html&gt;</code></pre>
<p>如果你问，我皮，我就不对齐，多了一列出来，怎么着？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">        	&lt;title&gt;一个突出了一列的表格&lt;&#x2F;title&gt;</span><br><span class="line">        &lt;&#x2F;head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">            &lt;table border &#x3D; &quot;1&quot;&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;商品名&lt;&#x2F;th&gt;</span><br><span class="line">                    &lt;th&gt;价格&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;榨汁机&lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;td&gt;35&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;菜刀&lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;td&gt;50&lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;td&gt;多出来一列</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;&#x2F;table&gt;</span><br><span class="line">	&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<!DOCTYPE html>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;一个简单的表格&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;table border = &quot;1&quot;&gt;
            &lt;tr&gt;
                &lt;th&gt;商品名&lt;/th&gt;
                &lt;th&gt;价格&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;榨汁机&lt;/td&gt;
                &lt;td&gt;35&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;菜刀&lt;/td&gt;
                &lt;td&gt;50&lt;/td&gt;
                &lt;td&gt;多出来一列
            &lt;/tr&gt;
        &lt;/table&gt;
&lt;/html&gt;</code></pre>
<p>也没怎么样，多一列就多一列，不会报错。这样对注释是很友好的，或者我只是不想要什么标题，就这么干。</p>
<p>如果你想要更复杂的表格：</p>
<!DOCTYPE html>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;一个简单的表格&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;table border = &quot;1&quot;&gt;
            &lt;tr&gt;
                &lt;th&gt;商品名&lt;/th&gt;
                &lt;th&gt;价格&lt;/th&gt;
                &lt;th&gt;类型&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;榨汁机&lt;/td&gt;
                &lt;td&gt;35&lt;/td&gt;
                &lt;td rowspan = &quot;2&quot;&gt;厨具&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;菜刀&lt;/td&gt;
                &lt;td&gt;50&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td colspan = &#39;3&#39;&gt;总计：85&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
&lt;/html&gt;</code></pre>
<p>这就像你的物理实验报告，你往往要串行串列、合并着写，而非每一个方格都是1x1。</p>
<p>实现功能的是&lt;td&gt;&lt;/td&gt;的标签，合并行（即竖着合并）为<code>rowspan</code>，合并列为<code>colspan</code>，后面跟上数值。比如上面“厨具”、“总计：85”对应的就是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span> = <span class="string">&quot;2&quot;</span>&gt;</span>厨具\<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span> = <span class="string">&#x27;3&#x27;</span>&gt;</span>总计：85\<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（注意外面有&lt;tr&gt;&lt;/tr&gt;包裹）</p>
<p>另外还有一个不太重要的东西&lt;caption&gt;&lt;/caption&gt;，表格名。</p>
<p>比如在上面的代码里&lt;table&gt;&lt;/table&gt;内加入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>价格表一览<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表格会变为：</p>
<!DOCTYPE html>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;一个简单的表格&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;table border = &quot;1&quot;&gt;
            &lt;caption&gt;价格表一览&lt;/caption&gt;
            &lt;tr&gt;
                &lt;th&gt;商品名&lt;/th&gt;
                &lt;th&gt;价格&lt;/th&gt;
                &lt;th&gt;类型&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;榨汁机&lt;/td&gt;
                &lt;td&gt;35&lt;/td&gt;
                &lt;td rowspan = &quot;2&quot;&gt;厨具&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;菜刀&lt;/td&gt;
                &lt;td&gt;50&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td colspan = &#39;3&#39;&gt;总计：85&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
&lt;/html&gt;</code></pre>
<p><strong>未完待续</strong>…</p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>事实上，本篇教程省去了很多的内容，比如&lt;meta&gt;标签和多种强调标签（phrase tags）。原因是它们的作用在<strong>局限于html的时候</strong>作用不大，或者有替代品。有必要的话，以后在css|javascript有接触到它们时，我再回来补充；而在那之前，本篇教程不作讲解，读者可以前往<a href="https://www.tutorialspoint.com/html/">tutorialspoint</a>查询详细信息。</p>
<p>最后说一点点菜鸡作者的感受：庆幸我们是生在互联网时代的人们，是长期接触过浏览器，受弹窗广告洗礼的人们，才切身体会到网页设计的有趣。许多tag在学习的时候，脑中不由得就有了熟悉的例子。</p>
<p>本文以后也许还会进行一次更新，有两点：一个是根据整体来调整各个标签所占的分量，增删内容，突出重点；二是文章结构的调整，让三个网页的例子更加清晰地站在三个部分的结尾。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇文章</title>
    <url>/2020/11/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>始于2020</p>
<a id="more"></a>

<ul>
<li><input checked="" disabled="" type="checkbox"> 搭建博客</li>
<li><input checked="" disabled="" type="checkbox"> 使用合适的主题</li>
<li><input checked="" disabled="" type="checkbox"> 更改头像</li>
<li><input disabled="" type="checkbox"> 添加分类（标签和目录）</li>
<li><input disabled="" type="checkbox"> 开放评论区</li>
</ul>
<p>这里↑要回车一下才能跳开tag（奇怪的bug）</p>
<p>间距有点宽，调一下？</p>
<p>好吧并没有找到调节的地方，先放一放。</p>
<p>11月21日小雪，早晨，终于完整地完成了Hexo博客的搭建。</p>
<p>历时居然有三个星期。第一个星期看Next和Hexo的原版文档，在Gitlab那边花了很多时间；结果也没怎么成功（说不定现在回去弄一下其实也可以用，因为关键一步已经“搞懂”了）</p>
<p>然后第二个星期，老老实实去GitHub搞，但因为一如既往的皮命名，网址访问不了——把存储名写成了WolpersHome.github.io，你是有多喜欢狐狸。</p>
<p>要写自己的用户名+.github.io才可以。具体原理没有搞清楚，不过挺奇妙的是我还没输完，只输入用户名时，它告诉我如果只输入用户名作为存储名的话，可以给自己的github页面做README.md，大概也挺好的？</p>
<p>当然，最后一个星期五晚上，终于接通，是通过b站看视频比对模拟完成的——为什么说是比对模拟，因为视频至少是一年前的，而更新之后的Hexo在_config.yml上有略微改变——最显著的就是找不到那个“URL”而只有一个“prettyurl（简洁的url）”，输入之后也全部木大，估摸着是给买了服务器和域名的人用的——这一步GitHub给我们提供了免费的页面，也算是文件储存服务器了吧。</p>
<p>简单谈谈这个博客的来历。某天situ2001把他博客发了给我，很棒，虽然没做太炫酷的东西，但博客有该有的东西，页面不伤眼——于是想到我打word时痛苦的眼睛，以及没有优雅感的.docx堆，我下定决心也做一个。当然，照猫画虎就是了，前人道路已经没有黑暗之处，走走便是。</p>
<p>于是照猫画虎画了三个星期。更恰当来说，是“照虎画猫”。现在还没找到合适的主题，没有标签和分类，没有评论功能。评论多半是给我自己更正什么的。</p>
<p>好了现在还没解决的问题有一，ip没有变，还是github的，我要确认那是不是需要购买域名才能换成我想要的博客ip——买个.cn或.com，每个月都得开销，这谁顶得住。（这是大致的认识，但我写的时候就觉得有偏差，域名ip？有空具体查下看看）</p>
<p>先把我成功搭建博客的扶手梯放在这里，以供复习搭建思路。↓↓↓↓↓</p>
<iframe src="//player.bilibili.com/player.html?aid=44544186&bvid=BV1Yb411a7ty&cid=158772893&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>从Typora看到这个视频只有25%高度，看看发布之后是怎么样的。</p>
<p>本来想在这里放上代码，发现html语言的符号会让页面全部木大，而使用代码块演示，倒是可以。</p>
<img src="https://i.loli.net/2020/11/22/GWLTJmQnPiMrt9f.png" alt="![QQ]20201122124154.png" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;44544186&amp;bvid&#x3D;BV1Yb411a7ty&amp;cid&#x3D;158772893&amp;page&#x3D;1&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot;&gt; &lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure>

<p>写这篇文章的同时，我学会了hexo上放b站视频，复制代码块，使用图库，后台hexo自动登录等等，还是多亏了互联网。</p>
<p>行文没有思路，经常穿插，内容偶有重复，是随心所致，望谅解。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>技术博客（一）</title>
    <url>/2022/05/17/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>​        开出技术博客这个目录，自然是要记下业内或非业内的专业知识。与想象不同，从实际出发，我在开写前并不要求第一次写这类博客要写出个什么水平，而是要开个头，这样好有后面的进步，简而言之是”循序渐进”。</p>
<p>​        在技术博客这一类目下，要求还是有几点的。一是目的，技术博客从之前单一混乱的生活记录中分离出来，是因为有这样的目的，才有这个目录。我过去的记录多模仿了他人的参赛记录，却没有参赛的格局，只是记录琐事，这种应当另开一目，归到轻松愉快的日常中。技术博客便从自己学到了什么入手，详细过程，对之后的技术博客提出跟进要求。二是格式，与生活记录使用相似的结构即可，即做了什么、在做什么、要做什么三大部份。可能在名词上有些不同，但总的是”过去””现在””未来”三个格局。</p>
<h2 id="近来做的事"><a href="#近来做的事" class="headerlink" title="近来做的事"></a>近来做的事</h2><h3 id="一堆报告"><a href="#一堆报告" class="headerlink" title="一堆报告"></a>一堆报告</h3><h4 id="软件工程总结"><a href="#软件工程总结" class="headerlink" title="软件工程总结"></a>软件工程总结</h4><p>​        几个简单的图的使用。作图软件用的Rational ROSE，习惯之后还算好用（重点在于最后可以直接复制到Word文档，并且很清晰）；另一软件draw.io图类型比较全，不专为OOAD准备，流程图、甘特图、网络拓扑图都能画，但输出方面就一般了（也可能是我没专门去研究，只是画过一些很简单的图）。总体建议就是，做OOAD用ROSE就对了，其他图就draw.io，思维导图就XMind。</p>
<p>​        要说学到了什么东西，主要还是去知网上看论文了。</p>
<p>​        就拿最新看的一篇，用Vue.js做GIS可视化的，刚好可以给我加深Vue的知识，深入确认自己所学。</p>
<h3 id="13折线PCM编码-基带传输"><a href="#13折线PCM编码-基带传输" class="headerlink" title="13折线PCM编码/基带传输"></a>13折线PCM编码/基带传输</h3><p>​        先说说13折线PCM编码的位置，它是基带传输前的工作，传输之前，将其压缩成8位*任意长的矩阵编码，是非均匀量化编码的简化版，相对后者来说可实现。整个过程其实就是比较大小、十进制和二进制转换的问题。编码为关键，做好了，译码则简单。</p>
<p>​        第一步将原波形缩放一下，振幅在[-2048，2048]之间（为什么是这个区间下面解释）。随后按自己的要求采个样。这是准备工作。</p>
<p>​        随后了解一下8位编码C1～C8的含义。C1表示某一时刻振幅的正负，C2～C4三位，共表示8种状态，即000～111。这8个数字分别代表振幅的大区间开始位置，[0, 16, 32, 64, 128, 256, 512, 1024]。比如振幅为67，则C2C3C4=011，即上面这个数组索引为3的64，表示振幅位于64～127之间。同理，我们可以推导出最大的区间为1024～2047，此时C2～C4=111，结合C1范围可达[-2047, 2047]，为什么不是2048我们接着说。</p>
<p>​        上面说C2C3C4=011时，最大是127，为什么？这就要看剩下的4位编码C5～C8。C5～C8的作用是将大区间分成2^4=16个区间，即C5C6C7C8=0000时，表示64+0 * (128/16)=64；C5C6C7C8=0001时，64+1 * (128/16)=64 + 8 = 72，表示大于64小于等于72的振幅，统一用0001表示。这就是前面提到”压缩”所在，我们不需要精准到个位，给个大概区间就行，不会太影响译码后波形的大体情况，只是有些失真。而这一点微不足道的失真，却为我们换来了极大的空间，赢得了传输效率。你问我，这失真到底有多大，到底严重不严重啊？看下面图：</p>
<img src="https://s2.loli.net/2022/05/17/98vamqECiHV3r2M.png" style="zoom:50%;" />

<img src="https://s2.loli.net/2022/05/17/1SzOyEQd64oJGCg.png" style="zoom:50%;" />

<p>​        什么意思？我故意隐藏了两张图的标题，你猜猜，哪个是原来的波形，哪个是译码信号？</p>
<p>​        嘿嘿，还是留了一手的，振幅在[-1, 1]之间的是原信号波形，另一个则是译码波形。看看吧，完全没区别吧？只有等你放大了许多：</p>
<img src="https://s2.loli.net/2022/05/17/S3WzwFQ6AX1qjKG.png" style="zoom:50%;" />

<img src="https://s2.loli.net/2022/05/17/8lfezkaqWAQUdY4.png" style="zoom: 67%;" />

<p>​        就像拿着4寸显示屏看8K直播一样，大概也是无用的、浪费的资源居多，显示屏就那么大，再清晰的细节人眼儿也只能展示出4寸的水平。</p>
<p>​        言归正传，因为16个区间，从头到尾有17个点，第17个怎么办？没关系，我们做个小调整。刚刚我们不是说，64～71都用64表示吗？现在我们向上取整，64仍然是64，但65～72这样的区间，不用64表示，而用72，这样C5C6C7C8=1111时，表示121～128都归为128。列个表格就清晰了：</p>
<table>
<thead>
<tr>
<th align="center">C5C6C7C8</th>
<th align="center">振幅范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0000</td>
<td align="center">64</td>
</tr>
<tr>
<td align="center">0001</td>
<td align="center">65～68 =&gt; 68</td>
</tr>
<tr>
<td align="center">0010</td>
<td align="center">69～72 =&gt; 72</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">(125-73) / (17-4) = 4（验证小区间，也叫步伐，正确）</td>
</tr>
<tr>
<td align="center">1111</td>
<td align="center">125~128 =&gt; 128</td>
</tr>
</tbody></table>
<p>​        误差没有计算过，目测是比分成16块更准确。</p>
<h4 id="抓包-网络"><a href="#抓包-网络" class="headerlink" title="抓包/网络"></a>抓包/网络</h4><p>​        Wireshark的基本使用方法，是先过滤地址，再过滤协议。地址可以在网页F12网络的”常规”一栏里看到，但是不要开着代理，因为请求全转给代理软件了。如果真这么做，就只能看见”localhost:转发端口”，ping也不大准确。</p>
<p>​        根据这个网页或目标地址，填”host ip地址”，抓包完成后再填入协议。这两栏有各自的特定语法，查一查捕获过滤器（Capture filter）、显示过滤器（Display filter）。</p>
<p>​        除此之外，用了下Cisco Packet Tracker，”网络”一词对我来说才有一个真实存在的实体——除了平时见的局域网，路由器接口之间同一网络号、不同主机号组成的网络也是网络的实体之一。配置静态路由关键在于接口之间的接线正确+网络号正确+转发目的地正确，三者缺一不可，把局域网的思想搬到这上面来是不行的。</p>
<h3 id="课外"><a href="#课外" class="headerlink" title="课外"></a>课外</h3><h4 id="普通话考试"><a href="#普通话考试" class="headerlink" title="普通话考试"></a>普通话考试</h4><p>​        5月21号考了普通话考试。</p>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>​        目前还在看基础。之前一步登天开始Vite，后来觉得不妥，弃了，打基础去。按照自己的目标，Vue要学到像现在我的JS这样熟练，最好在7月前后完结。</p>
<p>​        生活记录里提到，跟了个项目，目前是在做网页。因为前端用的是Vue，要求做状态监视，所以使用的是v-charts。Echarts的vue封装v-charts还算能用，但也只是能用地步，算不上好用，文档比较简陋，时常要去Echarts查配置项。不过怎么都比Viser好出一大截，这伙的文档是语雀做的，字符的半角全角都有问题，看着像API文档生成器加上一点描述做出来的。虽然它给了完整的示例+三种框架的实现，但配置项不容易找，要去封装前的AntV G2去查看，并且往往用不了，不知道什么问题。我用以上两个（v-charts、Viser）都实现了一次仪表盘和折线图面积图的组件封装，结果下来还是选了v-charts。</p>
<p>​        原因有俩，一是v-charts很完好地继承了Echarts配置项，就算是不想用Vue封装的v-charts，只是为了能在Vue里用Echarts，extend配置项依旧满足你对Echarts的需求。相比之下Viser不知道在干啥，只能看着它给的示例去改，然后对比G2文档的API找配置项。其次是动态效果，Viser折腾半天都是“咔”“咔”地变化的，毫无连续性；v-charts就不同了，仪表盘的指针就不说了，一维变化还好，但就算是折线图，二维坐标的变换，v-charts也支持。有了这一点，调一下折线图的动画效果为linear，更新间隔和定时器一致，就可以实现很NB的折线图平滑移动效果。</p>
<p>​        不过有个问题没解决，就是折线图淡出时，会被“咔”地一下直接shift走，左边直接空了一块。我目前的解决想法是：使用一个有动态效果的算法，在shift之前，不断地用两点间距计算、变换坐标，直到和倒数第二个重合为止，再shift出去。</p>
<p><img src="https://s2.loli.net/2022/06/07/kAma2cxRFT8wenS.png" alt="未修复"></p>
<p>​        现在总结下来，如果只用JS，Echarts和AntV G2应该相差不大。但封装过后的v-charts和Viser相比就差远了。一个能用，一个不好用。做Demo的期间，写OS报告也用到图标，这时就用上了Echarts，结果配置起来完全没问题，相当简单，效果也不错。</p>
<p>​        值得一提的是，相比Viser，其实我们可能还有一个更好的选择：封装AntV F2的VChart，<strong>注意跟v-charts是两个东西</strong>。鉴于v-charts的东西暂时已经足够好用，也没有开发移动端的需求，所以先不去探索。哪天想试试一定要看看这个，毕竟API是完善的。<strong>不过目前要求是懂vux</strong>（跟Vuex是两个东西），<a href="https://doc.vux.li/zh-CN/components/v-chart.html#examples:%E6%8A%98%E7%BA%BF%E5%9B%BE:%E5%B9%B3%E6%BB%91%E6%9B%B2%E7%BA%BF">完整的文档链接放这里了</a>。下面是一个简介：</p>
<blockquote>
<p><code>VUX</code>（读音 [v’ju:z]，同 <code>views</code>）是基于<code>WeUI</code>和<code>Vue</code>(2.x)开发的移动端UI组件库，主要服务于微信页面。</p>
<p>基于<code>webpack + vue-loader + vux</code>可以快速开发移动端页面，配合<code>vux-loader</code>方便你在<code>WeUI</code>的基础上定制需要的样式。</p>
<p><code>vux-loader</code>保证了组件按需使用，因此不用担心最终打包了整个vux的组件库代码。</p>
<p><code>VUX</code>并不完全依赖于<code>WeUI</code>，<code>VUX</code> 在 <code>WeUI</code> 的基础上扩展了多个常用组件，但是尽量保持整体UI样式接近<code>WeUI</code>的设计规范。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        遗憾依旧，<del>没有参加到任何项目或是比赛中</del>（现在倒可能参加了一个），只是参与些小活动，混混第二课堂分数。</p>
<h2 id="正在做的事"><a href="#正在做的事" class="headerlink" title="正在做的事"></a>正在做的事</h2><p>​        近来减少了周记和月记的输出，但暗地里没少写文字。平生所悟都记在了”磁山后录”里。注重效率之后，平时做的事更多了，学会用Notion来记录目标、完成目标，并且持之以恒了有一段时间（其实也就不到一个星期）。</p>
<p>​        近来一在学日语，逐渐从简单走向复杂。我打算每天听简明日语之外，还要看看那本语法书。</p>
<p>​        二是经常看论文，我十分自信地认为，这种学习方式将会为我带来丰富的收获。</p>
<p>​        三来开始了MC的mod制作，找到了非常好的教程，坚持下去，看看能走到哪一步罢。</p>
<p>​        还有就是写报告。通信原理基本靠录视频、隔壁班代码和网上代码。计网老老实实地做了，有些还算实用。OS花的时间应该是最多的，但总体只觉得实验一是最接近操作系统的。其他的要么是模拟实验，系统函数都不用；要么就完全是写数据结构算法的。于是实验三干脆用JS写，Echarts可视化方便很呐。</p>
<h2 id="计划做的事"><a href="#计划做的事" class="headerlink" title="计划做的事"></a>计划做的事</h2><ul>
<li>坚持之前提到的</li>
<li>两周之内，看一到两本课外书（文学相关的）</li>
<li>完成毛概论文（已完成）</li>
<li>重启Bomblab</li>
<li>注意OS的实验，有概率暴雷，需要自觉提前完成</li>
<li>准备好回到课本、准备考试的架势</li>
</ul>
]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>月记</tag>
      </tags>
  </entry>
  <entry>
    <title>月记 ~ Jan 2022</title>
    <url>/2022/01/21/%E6%9C%88%E8%AE%B0%20~%20Jan%202022/</url>
    <content><![CDATA[<h1 id="月记-Jan-2022"><a href="#月记-Jan-2022" class="headerlink" title="月记 ~ Jan 2022"></a>月记 ~ Jan 2022</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1376714833&auto=0&height=66"></iframe>

<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>距离上次月记的时间并不久远，但因条件特殊（指考完试放假），因此记一篇。</p>
<p>总的来说，非常忙，忙到怀疑人生（开玩笑）。继上次月记的课设周之后，是大ddl周（4d）和考试周(14d)。时间不足一个月，但其实行文前已经想总结一下该学期，所以并不止包含这三个星期的事。</p>
<p>行文日期：1.20-1.22，1.29-2.4。</p>
<h2 id="What-I-am-doing"><a href="#What-I-am-doing" class="headerlink" title="What I am doing"></a>What I am doing</h2><p>由于不少部分写的是一个学期结束和寒假驾考之间的时间，所以没打算要在这短暂的休息期（4天）做什么。往多了算也就做做mc服务器里的小游戏地图，看看书，玩游戏，然后写写计划。练车会把时间打零碎，特别到后面都是集中训练，更没法做什么了。所写的这些无非是驾考完之后回来补充的。</p>
<h3 id="写计划"><a href="#写计划" class="headerlink" title="写计划"></a>写计划</h3><p>目前在计划自己的方向。为何这么晚才开始写计划，前面亦有提及：考驾照。20日返程后，短暂休息几天，25日便开始到考场练习科目三。不仅包括寒假的计划，也有下个学期的计划，甚至以后要走的方向也想要再次明确一下。</p>
<h3 id="新周目"><a href="#新周目" class="headerlink" title="新周目"></a>新周目</h3><p>计划为RPG周目。</p>
<blockquote>
<p>目前计划以河岛城东为第一章主要地点，事件为“城东剿灭”，目标为<strong>驱赶</strong>占领边境要塞的不明势力以及潜藏的拉特兰铳兵势力，将河岛山河与势力还予柏原山。沙漠背景，为边境之处。设置多个目标，多个硬目标，需要去一些地方解锁前置才能进攻，否则自寻死路。最终与攻城者头目军队对峙，于要塞中庭对决。拉特兰铳兵在对决前暗中撤离，攻城者中队失利后逃窜。<br>这是一部分策划。第一章通关后，解锁“柏原之音”直播间，“柏原墨迹”图书馆。完成在直播间放华灯宴的成就。</p>
</blockquote>
<h3 id="处理旧电脑"><a href="#处理旧电脑" class="headerlink" title="处理旧电脑"></a>处理旧电脑</h3><p>这电脑放着太浪费，但开着耗电更吓人，目前在想解决方案。大量的耗电已经阻碍其成为合格服务器的最大原因，因此考虑方向变窄了。一个临时看好的方案就是远程开机关机以控制功耗，总体作为一个开发环境或者是学习工具。</p>
<p>*补充：第二天旧电脑就寄了，这个毛病是可复现的，问题可能是硬盘或主板，迟点买个机械硬盘换上去，如果问题依旧，机械硬盘可以拿去当路由器的附属存储——我还需要一个足够好的跨平台软件来给我备份、同步各端之间的东西。</p>
<h2 id="What-I-have-done"><a href="#What-I-have-done" class="headerlink" title="What I have done"></a>What I have done</h2><h3 id="驾考-行动记录"><a href="#驾考-行动记录" class="headerlink" title="驾考 - 行动记录"></a>驾考 - 行动记录</h3><h4 id="三日训练"><a href="#三日训练" class="headerlink" title="三日训练"></a>三日训练</h4><p>接上文，1月25日开始到考场模拟训练。科目三包括的内容有许多，如过斑马线、超车、加减档、靠边停车、掉头等，是展示机动车在道路上如何行驶的项目与教程。<br>我的考场有三条考试路线，一号线为沙漏型，二号线为回旋镖型，三号线为直线型。<br>项目虽多但不少重复，实际上真正的项目则是9-10个(线路项目总数约为16-20)。</p>
<p>在训练行车的过程中我作下了笔记，对于每一个项目的细节均有注意点，突出易错点。</p>
<img src="https://s2.loli.net/2022/01/29/MjUlPS6RCOzwsch.jpg" style="zoom:50%;" />

<p align="center">笔记的一部分</p>

<p>这是训练第二天开始写的，临考前还修改了下。虽然没有对照组给我证明“做笔记确实好点”，但我所知道的是，我考试的时候灯都是提前许多打的，没有遗漏，基本上到点前记得下一个项目是什么，这是实际效果。</p>
<p>这里不得不提及一下这几天的训练。与往常一样，4个人一批，一同训练、考试。然而不幸的是，另外三位学员已预约28日，而我在28日的排名太靠后，只能取消28日转而去预约29日。后来了解是她们三位从报考至今已近一年，按时间排序，她们优先。于是28日在家休息一日，29日前往考场独自考试。</p>
<h4 id="考试当日"><a href="#考试当日" class="headerlink" title="考试当日"></a>考试当日</h4><p>依旧早晨六点多起来去车场，随教练上百合车场。因为排队排后了，等第二批——同时因为车流量原因又在车上等了一个多小时。早晨十点出头，考试车队出发，可见墟内依旧车水马龙，对考试不太有利。</p>
<p>届时，天气片刻转晴，而后回转阴天。坐车里还挺热的。</p>
<p>我被分配到3号线——非常幸运。我认为这是最简单的一条。但也因此没有下太多功夫去记路线，只能在下车后再多看几眼笔记和路线图；换言之，我用了许多时间去记一号和二号线的注意点和路线图。</p>
<p>所在的考试车辆，是⑨号车。</p>
<img src="https://s2.loli.net/2022/01/30/5NdxKhUtvq2n4kW.jpg" style="zoom: 12%;" />

<p align="center">摄于回程后，前往交还考试牌的路上</p>

<p>科目一到四的每次考试，考生都有两次机会，第一次不及格立刻寄了重开，再不及格就真寄了。我是⑨号车最后一个考生，加上前面两位都考了两次（具体情况之后叙述），因此等待时间大大拉长了。正常来说，一次完整的流程约25min，我等了一个多小时，心如焖煮，时而望望考试车来了没有，时而看自己的笔记和路线图。</p>
<p><strong>等待的过程是极其漫长且stressful的</strong>。一边看前面的考生们，从车里出来，竟有过半不及格；加之前几日同车训练的另外三位，已在28日当天全部通过，所以压力都来到了我身上。</p>
<p>与我同一考试车的还有两个人，一位是与我年纪相仿的女生，第二次通过了，第一次是打转向灯不足3秒便开始操作，扣了100分；另一位是阿叔。阿叔下车时，是从副驾驶下来的。此时约十一点半，我的试炼开始了。</p>
<p>与教练车不同，车外四个圆形铝片是可以按下去的（不过位置一样），并且按下去时，每一个均有语音提示。值得一提的是，许多扣分项已经与之前不同，包括科目三的合格成绩已经是90分（而非N年前的70分），打错灯、不打灯、打灯时间不足都是扣100分。考出来的学员大多不是100分就是0分——因为扣10分的项目极少，仅有熄火和靠边停车30-50cm两项。</p>
<p>我承认考试那一次，应当我是做的最好的一次。中途没有失误，速度均匀，时长较短（20min），并且不需要重开。</p>
<p>超车、变道、掉头和靠边停车，是我考试里最关注的几个项目。前三个一旦判断失误，安全员踩下了刹车，即为涉嫌危险驾驶，一次机会没了。对后视镜中物体的误判经常发生在如下情况：</p>
<ul>
<li>后方教练车或考试车跟车太紧，阻挡部分视野。</li>
<li>降水天气，后视镜模糊，反射效果差。</li>
<li>极度晴朗天气，镜中有很多物体在同时发亮，导致误判。</li>
</ul>
<p>稳妥的方法只有一个，那就是停下来，认真观察前后情况。</p>
<p>忐忑之下，双手始终有点抓得紧。一是紧张，二是虽然紧张但还是要控制方向。<br>判断自己车距离车道边缘多远，是靠视觉和感觉的，三天的训练中，我倒是找到了自己的方法。事实证明方法没问题，适合即可。</p>
<p>一路按计划操作，基本畅通无阻。靠边停车的完成，使我放松了点心情——考试机器并没有发出距离不足的声音，因此证明我的停车效果很理想。此时，再次打左转向灯，入档放手刹，来到最后一个项目：加减档。<br>三号线留出的加速距离非常的长，固然施展起来很顺手（当然还是要在250m内完成）。这手刹很紧，紧到让我一开始起步那会，就怀疑是不是没全放下去；这档位也毫不相让，如同内部生锈一般卡顿的操作手感，问不知慌了多少个可怜家伙的心态？<br>经历过科二上坡时操作手刹的我，已经对此无感，顺利通过。</p>
<p>实际上，减档完成后我依旧没放松：这里离终点还有百米距离，你要是压实线，那还是寄了重来。我一直僵在座位上，挂着一档，缓慢前行，直到听到：</p>
<blockquote>
<p>“日间行驶考试结束，成绩合格。”<br>“请把车开回终点。”<br>“日间行驶考试结束，成绩合格”（不错，系统还重复了一遍，我记得）</p>
</blockquote>
<p>那百米之后，便是我左右踱步等待一个多小时的候考区。那是一个小坡，坡上有个士多，后庭养鸡、门面朝我，此时考生尽数跟车回场，我是最后一批了。</p>
<p>下车拿到手机，看了下，十一点四十五分。</p>
<p>于是计划去考科三文科（俗称科四）。中途人烟稀少，至车场，人员所剩不多。唯独前面提到那位女生还在，与我有同样计划，便聊了会天，刷下题。对于科三，她说了许多——有曰，与她一行的另外三男竟均未通过，而不被教练看好的她却成了唯一胜者，只不过，胜者在挨饿等考，败者与教练去吃饭（据本人言其实并不想吃饭）；曰，她这是第二次考科三，相比第一次考试的人，更之紧张；曰，考试过程如何紧张，第一次如何失误以致沮丧者云云。<br>她言语难掩的激动暗示需要一个人与她分享。于是在这一个多小时里，我充当了这个角色。</p>
<p>之后便是一同去考场，人员甚少。等待下午一点半的开考——事实上也并没有复习得多少题。</p>
<p>经观察发现，驾考宝典专门把最难的案例分析、违法种类放在了前面，以便最大化考生的得分率。这类题第一次做的时候，错的会非常多，其关键是教予分析方法、注意点，得道即可类推。不过顺嘴一提，“必可活用于下一次”的其实居多是科目一的考试内容，而非这些临时学习的案例（有，拿了当然更好）。</p>
<p>恰逢做完少许题目的同时，考试前的压力得以完全释放，此时我便有了计划，是“抽样法”，即打算后面每个章节只抽几题来做。</p>
<p>移步候考厅，只有吾等两人。至一点二十，做准备进考场。</p>
<p>这次那位“教师爷”不在，便不用听他边骂人边啰嗦了，直接进考场。</p>
<p>本来以为80分及格的我，刚好错了5道题。事后才知，合格是90分，但凡飘一点就寄了。</p>
<p>下楼最后走一次那个斜坡，那个圆圈。那是半年前同样时而阴沉时而晴朗的一个夏日早晨，我考完科目一在此等教练，第一次开动了车子（那流程我们俗称“学走路”）。此时，天气依旧如进考场前一般阴郁，而我心中的阴郁不再，取而代之的是，释然开怀。我算了算日期，恰好是半年：7.29~1.29。也算是有始有终了。</p>
<p>最后回到士多，与刚才那位女生再聊几句有的没的，互相庆祝一下，随即道别，结束了这一段前后跨越半年的学车经历。</p>
<p>至此，<strong>一个学期的忙活终于结束了</strong>——没完没了的考试也终于停下来脚步。<br>很庆幸，如此高强度高频率的考试下，竟没有挂掉一科（六级那个就别算了），实属万幸。按常理来说，科目三要是挂了是十分正常的；随之而来的科目四，如果没有事先准备过，仅仅临时抱佛脚就上场了，也有挂的可能。<br>而现在，科三科四于1.29都pass掉了，这天啊，当是个值得纪念的日子。</p>
<p><img src="https://s2.loli.net/2022/01/30/NYBFVknKAsgPG9U.png"></p>
<p align="center">状态更新</p>

<h3 id="学业-学期总结"><a href="#学业-学期总结" class="headerlink" title="学业 - 学期总结"></a>学业 - 学期总结</h3><h4 id="前摇"><a href="#前摇" class="headerlink" title="前摇"></a>前摇</h4><p>我专业的这个学期课非常多，依旧还选了两门选修课，又报了六级，结果到后面压根应付不过来。<br>因此我在这里写下的不仅是记录，还有建议和反思。</p>
<hr>
<h4 id="首"><a href="#首" class="headerlink" title="首"></a>首</h4><h5 id="总括"><a href="#总括" class="headerlink" title="总括"></a>总括</h5><p>这个学期的考试课如下：</p>
<ul>
<li>计算机组成原理（带实验，带课设）</li>
<li>数据结构与算法（带实验，带课设）</li>
<li>数据库原理（带实验）</li>
<li>大学物理（带实验）</li>
<li>通用英语</li>
<li>马克思原理</li>
<li>概率论</li>
</ul>
<p>共7门考试课（体育论外，即没有书面考试）。外加JAVA的实验，共5门实验。这个量差不多是大一一年的总量。</p>
<p>来看看第九周的样子你就知道了——</p>
<img src="https://s2.loli.net/2022/01/22/LODKMuefsqHI7C2.jpg" style="zoom:40%;" />

<p>5天有4天晚课（二、四晚是我的选修课），基本上都在下午第二节空出了时间，因此这个学期都是下午4：30开吃，时间十分不充裕。</p>
<hr>
<h4 id="中"><a href="#中" class="headerlink" title="中"></a>中</h4><h5 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h5><p>其实压力最大的还是在第九周的实验课开始后，五个实验课。</p>
<ul>
<li>JAVA实验报告3份（适中）</li>
<li>计组份实验报告3份（较多）</li>
<li>数据结构实验报告4份（居多）</li>
<li>数据库实验报告3份（较多）</li>
<li>大物报告10份（巨多）</li>
</ul>
<p>上一个学期是四个实验课（数电、大物、面向对象、Linux网络，都很早就做完了），再上一个学期是两个（C++入门，网络基础），而按照工作量来说，之前两个学期加起来，还没这个学期的多。</p>
<p>JAVA算是最轻松的，很可惜没有更多时间给我深入。<br>计组需要花不少心思（即便在根本没弄懂的情况下），老老实实把过程都贴上去，问题都回答一下。<br>数据结构是“难”和“多”两者均沾，像我这样只看描述然后自己构思算法，需要很多打稿、测试的时间。如果对VS的调试不熟悉，那根本不可能走这条路——其实我在后期发现挺多人都不会调试的，只看代码然后算一卦哪里出了问题，结果有两种：</p>
<ul>
<li>改到了，但还有些许隐患。</li>
<li>没改到，BUG更多了。</li>
</ul>
<p>前者居多是简单BUG，后者则会占据他们大部分的迷惑时间。可见学会Debug是很重要的。<br>数据库其实多亏老师，我们的实验是很简单的，代码都给你贴好了，只需要你复制粘贴再修改一下——不过要有自己动手的能力，听闻有人光是Oracle就装了3个星期。当然了，实验三是自由的，选择权在你手上。<br>大学物理就不多说了，最简单的静电场、重力加速度、超声速必选，其他的我没选到啥好实验，光学的占很多（其实是避不开的，次推霍尔效应、光电效应、导热系数、粘滞系数，其实我最后感觉都差不多）。</p>
<h5 id="结课作业"><a href="#结课作业" class="headerlink" title="结课作业"></a>结课作业</h5><p>两门选修课的结课作业我都花了不少心思。一个是赤坎豆腐角介绍的ppt，另一个是pygame开发一个游戏（虽然最后只是个半成品）。尤其后面那个，大概用了两个星期吧（虽说还是有点慢了）。最后体会下来，如果想走开发游戏这行，可能还真需要懂点音乐、绘画和建模？这个问题之后解决。</p>
<hr>
<h4 id="末"><a href="#末" class="headerlink" title="末"></a>末</h4><h5 id="课设"><a href="#课设" class="headerlink" title="课设"></a>课设</h5><p>课设有俩，计组和数据结构。<br>课设有条件者一定建议提前开始搞。最轻松的，其实是理论课知识充沛情况下去做。简述一下我的情况，数据结构算法我都是自己yy出来的，没有经过优化，性能很差。计算机组成课设关键就在弄懂怎么算机器代码（光这个我课堂上就没听懂过）和CMStudio（软件）的操作，但其实我的代码没跑过测试，寒假要重新搞一下。</p>
<p>其实做完两个课设，我立马觉得这学期并没有学到太多东西——至少来说，我做的东西太不专业了。</p>
<h5 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h5><p>由于前面压力已经很大了，又没有怎么为后面腾出空间（如大物报告应当是提前写，结果是做完课设之后才开搞），考试的压力也堆积了起来。所以建议是：前期的闲时并不是白给的，先完成本业的情况下，再去寻求课外。这个建议很合理，却不能说服人去遵从。是的，除了本身行为的原因，课程本身也让我不感冒，所以尽是搞课外的东西去了，最后解释成一种无可奈何。</p>
<p>概率论——B站大学，2小时过概率论。需要两天左右的时间去练习、理解（其实还是比直接上课快了不知多少）。<br>这个视频确实可以让你拿60以上，但需要注意的是，要关注近年的题目。我这边近两年的卷难度陡增，今年亦是如此，如果没有准备，贸然定标60分，仍有挂科可能。</p>
<p>数据结构——靠平时学，期末总览时有视野、有印象。<br>最好的还是广学、深学这门课，因为数据结构与算法属于计算机入门的基础，可谓从底子上决定程序员的质量。因此这门课对我来说，远远没有结束。</p>
<p>计算机组成——难说，我认为我完全没有学过这门课，考试靠透题。</p>
<p>数据库原理——考试靠广做题，去课本寻根觅源。<br>顺嘴一提，事后我认为较好的学习顺序应该是：基础语句-&gt;实践基础数据库-&gt;实用理论-&gt;实用数据库-&gt;优化理论-&gt;优化数据库-&gt;并发理论-&gt;并发数据库，少说需要两个学期。很可惜，《原理》是从浅到深的理论，实验是很浅层的实践。</p>
<p>通用英语——看老师出题范围，背答案，保证基本的分数拿到手。</p>
<p>大学物理——上学期从练习册稍微延伸出去一点，而这个学期是挑练习册里最简单的题。</p>
<p>马克思原理——先背提纲，有条件弄到文本的可以直接背答案，当然也会有猛人拿到题目直接写正确答案给大家参考。</p>
<p>之前一个月记提到的体育，本来我并不抱有希望，老师却给了我一个惊喜。作为一个体育老师，走上讲台的样子是不多见的；而他走上讲台时，短短开场白已经让人深感专业，无需说结课后同学对他的评价——平时待人比其他体育老师好得多，重视学生培养的态度令人深刻。也许体测确实严了点，但给分那会，可是一点不小气。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>不挂就好</strong>。这是我对本学期学业的总结。<del>现在成绩还没有出全，但自我感觉挂的概率不大（也不是没有）</del>（后面出成绩了，确实没挂）。因为学期中和前期做了很多课程无关的探索，固然这种结果也不意外——“无关”可不等于“没收获”哦。</p>
<p>按部就班是后期的主旋律，为了让按部就班不那么无趣，时常在闲暇时间找些和谐与有趣。</p>
<p><img src="https://s2.loli.net/2022/02/04/OBqeQ972jCrYWdS.jpg"></p>
<h3 id="课外-及时行乐"><a href="#课外-及时行乐" class="headerlink" title="课外 - 及时行乐"></a>课外 - 及时行乐</h3><h4 id="修好了评论区"><a href="#修好了评论区" class="headerlink" title="修好了评论区"></a>修好了评论区</h4><p>现在博客可以评论了。这个问题一直想修，断断续续也在修，但一直都没找到好方法。如今最后的解决方法放在了去年那篇设置评论区经历的博客里，遇到的是两种常见错误，有需要可以去看看。</p>
<h4 id="熟练Qt"><a href="#熟练Qt" class="headerlink" title="熟练Qt"></a>熟练Qt</h4><p>Git了一个Qt做的数据库。使用的数据库是SQLite，而非Oracle，迟点整个OCI上去试试。制作过程还是蛮艰辛的，日渐习惯了自己去翻文档。以后或许还会接触，或许不会，但学了Qt始终不亏。</p>
<p>除了数据库，数据结构课设也是用Qt做的（虽然很简陋，但也就一天时间，还好老师赏面…）。</p>
<p>不得不说，直接调用别人做好的QSS给了我全新的体验。想来之后接触前端时，大概也能走走这种思路：窗口我写好了，部件就直接调用别人写的css，稍加调整，应当可以得到差强人意的页面观感。当然，问题也是有的，比如测试的时候部件大小跟后来样式文件不一样，不得不放弃该样式。是先选样式再开始写代码，还是反过来，还是其他办法，这个问题之后再想吧。</p>
<p>大概是从12月20日前后开始，一直写到了1月5日，期间包括计划和实施两部分，于是这两个星期包括圣诞节和元旦自然是这样过的：</p>
<p><img src="https://s2.loli.net/2022/02/04/GWR2qdxI9aFHjMA.jpg"></p>
<p align="center">平平淡淡才是真.jpg</p>

<h4 id="整理IPAD"><a href="#整理IPAD" class="headerlink" title="整理IPAD"></a>整理IPAD</h4><p>对资源的整合还是很重要的，目前最多的是草稿和书籍pdf。可以让ipad上外网了，可惜似乎不太必要。<br>方法很简单，电脑/手机热点开代理，ipad连入时设置代理即可。ipad没有专门的clash，有其他的代理软件，但看了几个之后发现居多收费且不符要求，就不太想尝试了，因为ipad上外网现在还不是刚需。</p>
<h4 id="笔记本BIOS更新问题"><a href="#笔记本BIOS更新问题" class="headerlink" title="笔记本BIOS更新问题"></a>笔记本BIOS更新问题</h4><p>刚考完科目三安全文明回来，发现笔记本强制更新了bios，结果导致无法开机。后来分析是，系统在的，文件也都在，只是引导被更没了。还好有u盘系统，进去修复引导就能开机。</p>
<hr>
<h2 id="What-I-plan-to-do"><a href="#What-I-plan-to-do" class="headerlink" title="What I plan to do"></a>What I plan to do</h2><h3 id="按照计划完成自己的疑问"><a href="#按照计划完成自己的疑问" class="headerlink" title="按照计划完成自己的疑问"></a>按照计划完成自己的疑问</h3><p>此处问题性质的东西比较多，没有太多实质性的内容，故不记录，仅作提醒。</p>
<h3 id="计算机组成：重铸"><a href="#计算机组成：重铸" class="headerlink" title="计算机组成：重铸"></a>计算机组成：重铸</h3><p>有必要重新铸造一下自己的计算机组成思维，因为这学期该学的时间在摸鱼。</p>
<h3 id="计网和操作系统"><a href="#计网和操作系统" class="headerlink" title="计网和操作系统"></a>计网和操作系统</h3><p>开始一些课程。</p>
<h3 id="矫正习惯"><a href="#矫正习惯" class="headerlink" title="矫正习惯"></a>矫正习惯</h3><p>我需要矫正三种习惯：拿手机经常打开聊天软件和B站的习惯、拿笔记本经常打开B站的习惯、忘记自己要做什么的习惯。</p>
<h3 id="玩游戏、看书和学习课外"><a href="#玩游戏、看书和学习课外" class="headerlink" title="玩游戏、看书和学习课外"></a>玩游戏、看书和学习课外</h3><p>寒假可闲下来了，MC的周目计划也比较自由了（其实是推掉了一些奇怪的委托）。很可惜，目前手上的服务器还是别人给搭建的，所以别人有需要随时可以回收的。我有计划自己去整一个阿里云的服务器，按理应该也可以满足需求的。而上面提到的处理旧电脑，也许会给它换个硬盘试试，要修不好就算了，毕竟还是太耗电。提取一下有用的数据，然后格式化一遍，就把老硬盘报废了。（其实我有使用机械硬盘的需求，说不定我需求的这块盘还是将来nas的成员）。</p>
<p>至于书嘛，和课外知识结合。虽然很多都是专业不相关的，但课外知识并不妨碍一个人的自我提升。</p>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>九月Java，十月Unity，十一月刷机，十二月Qt，一月考试，每个月基本上都在干不同的事，也还算充实，缺点是和课程离得有点远，我需要在寒假花时间去补回来。</p>
<p>落笔此处，已是正月初四，寒假过半，休息时间也差不多了，新的一年即将启程。华灯宴大典已然开幕，只是在我这还差一个落幕。</p>
<blockquote>
<p>依旧精良的制作，依旧热情的观众，依旧同心的创作者们，在此处汇集，赋予新的一年一首优美的交响曲，盼各位东方众依旧包容，依旧发光发热，依旧年轻活力。东方作为亚文化的魅力，或许已经远超其“亚”的范围，随着时间推移获得了一层又一层更深更现实的意义。</p>
</blockquote>
<p>为了弥补这学期的过劳，下学期我安排的松一些。只选了一个选修课；而实验课也只有三个，都跟专业相关；没有英语、大物这样的课程了（毛概例外）；体育选了个风评比较好的老师。</p>
<p>一个学期也如此结束了，我养成了无论多忙都写月记的习惯，希望还可保持下去。那么这一次，就在此收束吧。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>月记</tag>
      </tags>
  </entry>
  <entry>
    <title>测试页面</title>
    <url>/2020/11/20/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>这个页面是用来测试的，是因第一次Hexo一片空白而产生的测试页面</p>
]]></content>
  </entry>
  <entry>
    <title>生活博客（一）</title>
    <url>/2022/05/21/%E7%94%9F%E6%B4%BB%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>​        开篇点题，生活记录即学习之外的一些记录。大概还是会以疫情为主基调。</p>
<h2 id="近来做了什么"><a href="#近来做了什么" class="headerlink" title="近来做了什么"></a>近来做了什么</h2><h3 id="普通话考试"><a href="#普通话考试" class="headerlink" title="普通话考试"></a>普通话考试</h3><p>​        5月21日参加了普通话考试。得益于高质量大学的组织能力和效率，考试流程没有任何为难人的事——考试是单间，一人一屋，静音效果特好，不像很多地方考场，人员混杂着考。遗憾的是，我确信自己最后没考得多好，因为一些原始的问题还是暴露了出来，像回读、读错、卡壳，能上个二乙应该就十分不错了，但是三甲三乙就难看了点，这似乎是相当难受的卡点分数。</p>
<p>​        考这个试目前没有什么大用，我将其视为我回归实况主的第一步。第一步已经迈出，生命不息，实况不止。</p>
<h3 id="读论文"><a href="#读论文" class="headerlink" title="读论文"></a>读论文</h3><p>​        近来受软件工程结课作业的益，跑去知网上扒拉了几篇论文来看，颇有身处学府之神圣感。</p>
<p>​        目前只看国内论文。我有想过看国外论文，但很明显现阶段不宜直接跳到国外去，对我来说那叫本末倒置。先看看国内优秀的论文，再去看国外，才知道差距，才知道要怎么看，要看什么。目前收藏了一些前端应用的论文，以省级校级优秀论文为主。这些文章讲好听可以叫做先进的高科技应用，讲得很难听也就是中肯的项目开发经历，没有不值得看的。里面有很多考量因素，即便生凑也有说得过去的理由。相对于绝大多数长篇博客来说，论文水准高出一截。</p>
<h3 id="学日语"><a href="#学日语" class="headerlink" title="学日语"></a>学日语</h3><p>​        开始学日语。一方面是阅读现代的教程，另一方面去听简明日语的课程。后者进行时，虽然总觉得不知何处有些尴尬，但总体还是可以一用。</p>
<p>​        近来课外书看的少了，不是做实验就是各种小考大考，又或是各种活动。在这里我计划下准备要看的课外书，最近只看一本就够，不可囫囵吞枣。在计划的，有一本《枪炮、病菌与钢铁》，讲世界文明的。</p>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>​        参加了个项目，目前项目的审查状态未知，只是听着老师的建议去做点小网页。于是Vue的进度又前进了一大截，并且庆幸Vue的生态比Vite宽泛得多，很多第三方库都照顾。之前Vite想引入个小图标都难如登天。做了几个小组件之后，对响应式的实现有了切实的了解，主要是数组在响应式中的应用。深入的内容记在技术博客里。</p>
<h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>​        读了《ES6 For Humans》的大部分，介绍2015年发布的ES6中新增的一些规范，但看下来也只是粗略认识了下ES6的新东西，没有很深入。意外的收获是，Typora将MD转为PDF会非常好看，尤其是Pixyll主题，对英文和Typora的各种结构有很强的适配，建议用MD写的书全用这个主题转成PDF，放在IPAD上看。</p>
<h3 id="做核酸"><a href="#做核酸" class="headerlink" title="做核酸"></a>做核酸</h3><p>​        这个月做了七次核酸。六月初，上海解封。音律联觉暂时没啥消息，估摸着至少要暑假才有可能。</p>
<h2 id="在做什么"><a href="#在做什么" class="headerlink" title="在做什么"></a>在做什么</h2><h3 id="学Vue"><a href="#学Vue" class="headerlink" title="学Vue"></a>学Vue</h3><p>​        现在课程接近到二分之一了，后面比较重要的，有路由、组件通信、setup和vue3内容等。</p>
<h3 id="mc的mod编程"><a href="#mc的mod编程" class="headerlink" title="mc的mod编程"></a>mc的mod编程</h3><p>​        难就难在版本不同，Map对应的各个函数有不同，需要自己去看接口。现在玩MOD颇有JS调别人第三方库的感觉，写这些的人太猛了。</p>
<h3 id="写报告"><a href="#写报告" class="headerlink" title="写报告"></a>写报告</h3><p>​        三个实验课，还应付的过来。早前的软件工程已经出成绩了，赏脸给了优，《带你听懂》也十分给面，考试多少分，成绩就不会比这个分低。体育倒是担忧的——逃课两次被抓了。一次是测1km的，一次是跳远五十米那些。会不会被记到逃课记录里，看造化力。</p>
<h2 id="想说什么"><a href="#想说什么" class="headerlink" title="想说什么"></a>想说什么</h2><p>​        最近基本三点一线，图书馆教室宿舍，疫情防控依旧在进行，核酸从这个月开始常态化，隔三岔五就来一次，不过得益于高质量大学的拨款力度，核酸免费。</p>
<p>​        最后接近考试了，一方面需要加紧复习和做题，另一方面要跟进项目，把应该有的效果都做出来。但并不能因此放弃休息或是带病上岗，需要注意自己，尤其是眼睛和脊椎的保养。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>月记</tag>
      </tags>
  </entry>
  <entry>
    <title>零散的年记</title>
    <url>/2021/09/13/%E9%9B%B6%E6%95%A3%E7%9A%84%E5%B9%B4%E8%AE%B0/</url>
    <content><![CDATA[<!-- more -->

<p>不知用了多少次“高考成绩出来前我都不知道有广州大学”，也不记得走过多少次理南和风雨长廊，在一片自适应中，大一一年就过去了。</p>
<p>时值中秋前十日，朝晚有清风，酷暑不离身，我坐在图书馆总结了一年下来的走动和忙活。</p>
<p>“走动”似乎用的不是那么贴切，因为我不大走动。但能记录下来的事大多离不了校园内四处走走，又不能用“舍里蹲”来形容，所以还是用“走动”吧。</p>
<hr>
<ul>
<li>自适应：总括起来就是调整自己适应环境，但也不乏选择环境或者改造环境他，来适应自己</li>
</ul>
<h2 id="上半学年"><a href="#上半学年" class="headerlink" title="上半学年"></a>上半学年</h2><p>庚子年，乙酉月辛酉日，携行李进入校园，俄而大雨倾盆。至舍，疲矣。时四舍友卧床午休，不能响动也。遂至商中，市桶盆、洗浴用品。复至舍，舍友竞相起，理床被。步图书馆，寻聪，沙县小吃以为晚餐。入夜，愁流量见底，校园网服务姗姗不来，度一晚流量节制。</p>
<p>次日，导生领路，行遍校园。于此，大学生活基调落定。</p>
<p>当月的二十三日，与老同学去大学城的GOGO购物中心——实际上当时我并没有准备，同学约我时我在图书馆，所以背包里还有台电脑，也没有回宿舍便出发了。路上多是闲聊，下午一点半回到宿舍，衣着尽湿，全是汗。</p>
<h3 id="部门"><a href="#部门" class="headerlink" title="部门"></a>部门</h3><p>如上文所说，自适应中走过大学一年，而最频繁自适应的，是上半学年。</p>
<p>起初几日，社团部门宣传，我有一个想法：尽量多地去面试，最后再考虑要不要加入。尝试过的有校广播台、校青协、院新媒体、院义修队等等。记得其中两个部门下辖小部门，广播台面试了视频组和广播组，新媒体面试了视频组和另一个跟团党有关的部门（记岔了别打我）。几日后，约莫有三个收了我，基本上都是短信通知的。在适应大学节奏的同时，我评估了我再在每个部门的适应性，最后只呆在了义修队。</p>
<p>一年下来证明，我的选择没有离大谱。</p>
<p>义修队里交流时间比较充足，不似其他部门以工作和DDL为主。毕竟就两个字，一个“义”，“志愿”的服务，一个“修”，会就修，不会就学。除此之外，值班时间交给闲聊，自然能获得很多前辈的经验之谈。</p>
<p>反观我面试的其他部门，确实没哪个是这么轻松的（当然应该确实有更清闲的，一学长曾向我推荐院青协，不是校青协，因为当时不知情而错过了）。至于我进入的另一个部门，校青协的网络资讯部，分工多，忙活却也多，要学要改要挨批的，该来都来，一样不少。于是在11月上旬，正式的“全体大会”之前，便退出了。</p>
<p>义修因为本届人多，三周一值班，不得不说，很轻松了——其他两周惬意地在兰三吃个晚饭，之后回去打游戏，或者忙活其他，都十分地自在——要是实在无聊了，就去义修队吹空调呗。</p>
<p>感恩于师兄们的培养，今年就算不留部，依旧会时不时过去帮忙的——能帮则帮，能学则学。</p>
<p>记得有一师兄给我印象特深。</p>
<p>一次值班，应该是次年学年中，一义修老师兄临收工来清灰——我们端详时，才知道是17级的师兄，没留部，但技术依旧了得。本子特厚实，游戏本，A面贴着初音未来。给到我手上掂量时，我是懵的——完全不会拆，结构异常复杂。还好师兄只是来借工具清灰，不然全交给我就尴尬了。不过即便他自己会拆，也必须时不时对着视频确认。期间他说起自己，已经入党，三四年来打竞赛、参加活动颇多，也颇有收获。“拆机最紧要的，是胆大心细，”看着他拆机时，他说到，“要多少时间不重要。”</p>
<p>想了想也是。别不敢拆，不然别人也不敢把电脑给你。</p>
<p>后来在队长交接时，另一位师兄发了张当年的合照，看到上面确实有他。也不得不感叹，人在四年间变化了不少，在照片中的许多师兄，我差点认不出来。</p>
<h3 id="作息"><a href="#作息" class="headerlink" title="作息"></a>作息</h3><p>次年一月前后，寒风凛冽，走个天桥冻死人。在这种情况下，我还要打排球，出一身汗，然后中午躺床上睡觉——这一开始就让带点儿洁癖的我感到十分膈应。于是选择中午洗澡——然而还是十分不舒服。</p>
<p>最后迟迟在军训时决定，没有条件就不再睡午觉了。</p>
<p>睡不着，睡得痒，睡得昏，还不如犯犯困，然后学点东西、乃至看有趣的东西放松一下来得好。</p>
<h3 id="军训"><a href="#军训" class="headerlink" title="军训"></a>军训</h3><p>军训十四天，实则十三天——有一天极其的舒服。冬训早晨下了点小雨，忽然教官们全走到路边，开始人体传令。约莫九点半，全体回宿舍，曰“今日任务改为卫生检查”。作为一个学生，我自然推测是学校担心冬季淋雨极易感冒，引发大规模流感就可能要封校停训了，毕竟新冠肺炎当头，集体流感也不是闹着玩的，全都得当作新冠肺炎，隔离监察。于是选择牺牲掉一天，避免出事。</p>
<p>考完试的我们，没事做，午觉从十二点睡到两三点，打一场L4D2，然后吃完饭，吃完回来再打——不用吃饱就赶去训练、睡极其短暂的午觉，也不用晚上赶着时间洗澡睡觉，这军训实在是过分舒服了。</p>
<p>我参加了分列式——简单来说是去代表连队和院去表演走正步的方阵。训练过程说苦不苦，说不苦那是假的。不过教官们甚至还有心机去考虑被裁出来那些队员的军训项目加分，显然大部分教官还是人好啊。没有参加分列式的同学，闲下来时闲而充实，因为学校允许带手机，休息时间可以看——不过如果训练时拿出手机的话，就是你的不对了。</p>
<h3 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h3><p>中规中矩，虽然有不少瑕疵，但还是平稳度过了。</p>
<p>个人用时用心最多的是高数、C++和线代。线代最终不太满意——张老师不太会教，只能自己去宋浩那儿学，笔记也乱七八糟。成绩估摸着是因为没回答过问题，被平时分拉下去了。好几节课我都是戴蓝牙耳机上宋浩的课，最终也只是会做点题。建议来年计算机的学弟学妹注意避雷，提前做好刷课刷题准备。当然，很大程度上看老师，老师会教，时不时给点作业和联系，线代是很容易过的。尤其是有习题讲解的那种老师，专心听，做笔记，保证你不用额外功夫去上网课。 </p>
<p>这位老师倒是给我们留下了一个梗：“往前坐！”。事出一次上课前，两个班的人，前三四排一个人都没有，于是张老师跑到课室后面把人赶到前排：“后面三排的，往前坐！”事后我们竞相争中间靠边的位置，以腾出足够空间上网课并逃避张老师跑上来检查的扫视。</p>
<p>张老师的考勤还极其苛刻——到了倒数几节课，突然全部要考勤，并且是关门打狗式的考勤。一边盯着门一边盯着同学签名签到，以防有人代签。</p>
<p>网络基础的课还是很好玩的。最后搞完实验了，可以组网打CS。</p>
<p>当然，剪网线是我没想到的。还有测试通路的机器，如下图。</p>
<img src="https://i.loli.net/2021/09/16/hNpUyWjmnXLfIBb.jpg" style="zoom:10%;" />

<p>年末，考试周。第一个学期，我的专业拉分点（拉低）在高数——6个学分啊，所有科目加起来大概也就20来学分。现实情况是，高数难，普遍不能往上拉。何况高二到高三我拉跨的就是数学呢？第一个学期下来拼了老命，还好最后绩点维持在了3.5+；</p>
<h2 id="下半学年"><a href="#下半学年" class="headerlink" title="下半学年"></a>下半学年</h2><h3 id="再出发"><a href="#再出发" class="headerlink" title="再出发"></a>再出发</h3><p>思考上半年的经历之后，我最终选择了给自己两条路走，网络和软件（偏游戏开发）。于是下半学年多与待宿舍写代码有关。</p>
<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>当初situ带我入坑，很抱歉并没能频繁更新——不过我也知道自己在忙啥。去年十一月份照猫画虎用了几个周末才整了个博客的壳子，到如今评论区都还没完善，其他文章的内容也很杂乱，甚至还有的没写完。所以我得计划下博客接下来怎么搞。</p>
<ul>
<li>每月至少更新一次博客</li>
<li>优化阅读体验</li>
<li>整理档案</li>
<li>补上所有可点击的页面</li>
</ul>
<p>这次经历也证明，计算机的东西，频繁使用照猫画虎是个坏习惯。</p>
<h3 id="游走"><a href="#游走" class="headerlink" title="游走"></a>游走</h3><p>三月末，记得是清明节，和老同学前往北京路。虽然人比较多，但也符合我们印象里“步行街”的模样。</p>
<img src="https://i.loli.net/2021/09/16/lcI8jMJxmrUbOPL.jpg" style="zoom: 20%;" />

<p align="center">北京路，清明假期，人头攒动</p>

<img src="https://i.loli.net/2021/09/16/GHDMrs3khj9Vq2Y.jpg" style="zoom:20%;" />

<p align="center">财政府前，彩灯通明</p>

<img src="https://i.loli.net/2021/09/16/eDblVSCZALRsxUF.jpg" style="zoom:20%;" />



<p>之后因心意未满，又独自去了一些地方。<br><img src="https://i.loli.net/2021/09/16/idshHryBtWmQGbT.jpg" style="zoom:33%;" /></p>
<p>图片数量众多，只取几张。</p>
<img src="https://i.loli.net/2021/09/16/TMhD18uje5C9qiI.jpg" style="zoom:33%;" />

<p align="center">越秀山水</p>

<img src="https://i.loli.net/2021/09/16/G3tRweZKUXrMzcA.jpg" style="zoom:25%;" />

<p align="center">越秀五羊</p>

<img src="https://i.loli.net/2021/09/16/hMCgZ3AHUWLpFfo.jpg" style="zoom:15%;" />

<p align="center">花城广场</p>

<img src="https://i.loli.net/2021/09/16/SdnqzLyg4EjMFcX.jpg" style="zoom:17%;" />

<p align="center">广州图书馆</p>

<h3 id="学业-1"><a href="#学业-1" class="headerlink" title="学业"></a>学业</h3><p>经历了上个学期的打磨，大部分科目已经不成问题，并且应试技巧在第二个学期得到适应性的强化。</p>
<p>（说得自己越来越像Scape and Run: Parasite的寄生虫怪物了）</p>
<p>多亏义修队的大哥们和宿舍老哥出手相助，离散数学成了我的MVP科目。而在考试前的两三个星期，我还不知道怎么去学这个科目。</p>
<p>学了个MFC，当然学得是比较有兴趣的——我早在Windows XP年代已经想象过这些按钮的创建过程，很期望自己也有朝一日能写一个窗口程序。但落到实际上来说，MFC显然是过于老旧了，不方便的地方处处皆是，随便拉一个东西都可以抱怨上一天。就这样堆了几个下午，查查Microsoft Docs，MFC基本上就会了。课设我也选了MFC，不知道选的人多不多。临课设截止前的一个下午，我还“突发奇想”重写了第二个程序——关于画图的。第一个本来是直接从网上抄的，同质化严重，所以才有了重写。</p>
<p>虽然最终没有细化，但勉强能用。（找个时间把课设咕到Github上.jpg）</p>
<img src="https://i.loli.net/2021/09/16/Zxn9IyLv3eHqDXJ.jpg" style="zoom:30%;" />

<p align="center">"RH, a programmer uploading his course design pass 8:00 pm, didn't even have his dinner, leaving him UNCONCIOUS." </p>

<p>至于网络专业课，本学期是Linux专场。开始鼓捣路由器之后，才发觉Linux命令根本是越早学越好。至今还是只会几个常见命令。</p>
<p>每个学期都离不开数学，高数学完了《上》还有《下》，是关于多元函数求导、空间图形问题的，好好学，老师在讲例题的时候，一定要搞懂，那么复习时做起卷子来不会有太卡的地方。</p>
<p>最后下来成绩自己已经满意了，算上上个学期，绩点是3.74。对我来说，这样的成绩点到为止，不能再求高了。因为这是两个学期合起来的绩点，可以算算单下半学年的绩点是多少，就知道为啥不该再求高了。</p>
<h3 id="疫情"><a href="#疫情" class="headerlink" title="疫情"></a>疫情</h3><p>五月中旬，广州疫情再次冒出苗头。次月，疫情愈发严重，封校愈发严格。记得在这个月连续测了3次核酸。到七月初，方才逐步停息。</p>
<h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>自己唯一玩的一款手游《明日方舟》，既迎来了二三四五月良好发展的高峰，又在六七八月跌入了低潮。二月《画中人》，三月《源石尘行动》（彩虹六号联动）、四月《遗尘漫步》、五月周年庆外加大哈鱼整活，使整个圈子经历了高速的扩张。记得“两面包夹芝士”的时代，“游戏葡萄”发表了一篇文章《<a href="https://mp.weixin.qq.com/s/WVNLla4KvIAQ82QN3hhqPw">「两面包夹芝士」背后，《明日方舟》的文化裂变</a>》。</p>
<p>其中奶了一句：</p>
<blockquote>
<p>方舟已经占领了这个市场里很大一块空间，而且继续这样发酵下去，用户心里留给其他产品的位置就不够了，往后再出现优秀的产品，也没有足够空间可以发挥。</p>
<p>要与之对抗，<strong>恐怕只能等《明日方舟》自己犯错</strong>。然而即使它会犯错，在这之前，其他人已经没有机会了。</p>
</blockquote>
<p>当然，说“毒奶”自然是不合适，文章没有期待其犯错之意。然而，谁想到这之后便是下坡的开始。</p>
<p>偌大的六月仅有一个故事集《灯火序曲》作为新内容。后来，从九月的目光看，这故事集与主线还没有任何关联。</p>
<p>七月的新模式联锁竞赛游戏性不足，没有像多维合作那样作为伴生活动开启，导致玩家不得不去玩此新模式——结果可想而知。多重障碍下，这款游戏停止了它声誉的持续上涨，转而急剧下跌，部分玩家退坑。此后有《如我所见》故事集作为缓冲，但七月末的空降直播带来的新限定，再次让相当一部分人乱了阵脚。贯穿一个月的活动没有伴生往年的新模式，可见又是一次冒险。</p>
<p>对于不混圈的玩家、不社交、非氪的玩家，其实这些倒不算什么。打完后下线也不会有什么戒断反应，更不会因为活动质量而到处喷人。反之，则是大部分人，会选择去找问题，跟着热评的思路去验证，发现是对的，那就是对的。于是展示人类的本质——复读机，把这些未经思考的武断，无偿地传播出去。于是今天的社区就酿成了一种戾气，是时刻都要准备大骂特骂的戾气。</p>
<p>不错，我也曾是这大部分人中的一员，仅仅是脱离得较早，在“让你爱上学习”等UP的引导下独立思考过后，才能勉强比以前客观一点地去观察和记录。</p>
<p>在我看来，你要真觉得不好玩，自己去做一个好玩的吧。不开玩笑，你做嘛。</p>
<h2 id="暑期"><a href="#暑期" class="headerlink" title="暑期"></a>暑期</h2><h3 id="缩略"><a href="#缩略" class="headerlink" title="缩略"></a>缩略</h3><p>学车，还是学车。具体过程不在这儿说了，也许以后会补上一篇暑假的记录。总而言之，每天早上搭公交去小车场，练了19天，主要是侧库和人字库，以及衍生的其他东西。8月27号上大场，练3天，8月30号考试，过了，非常险，运气差一点点就过不了了。过不了后果非常严重——要用另一个寒假来补科目二，然后再到暑假才是科目三科目四。上大场非常累，并且晒、热，时常没有午休。</p>
<p>Java只继续了一点点，把基础打牢了。</p>
<p>不过还是要挂一下本次危机合约的曲子，比较洗脑。</p>
<p>Python已弃坑，不知道哪天再填坑。</p>
<p>关于学车，就评价两点罢。</p>
<p>一个是，学车，即考“中华人民共和国机动车驾驶证”，其实像做体操。把动作操熟了，大概也能过得去。并不能让你变得有胆子上路开车，除非你在学之前就开过。但体操是体操，上路，则更像是越野跑和障碍赛，有不一样的地方。</p>
<p>另一个，学车，很坏节奏。每天去车场，你可能觉得太勤奋了，我就只去半天就够了！你没想错，我说是每天去，其实是指，只要那天去了车场，就算做那天都去了。而我其实居多时候，也只是去半天。</p>
<img src="https://i.loli.net/2021/09/16/8jbhfBlSnNQMgaF.jpg" style="zoom:40%;" />

<p>然而，不管去了上午还是下午，其实那天就干不了什么了。早上去了，下午睡觉，傻一天；下午去了，早上睡醒吃午饭就该去了，晚上回来，累的一批，只想打游戏，这一天又没了。我时常有想推进Java的进度，学了半章，又写了几个题目，觉得很用功了——但回头一看，才半章啊、怎么一个暑假才推进了六七章啊。反之，如果连续地学，即便被题目卡了许久，下次回到推进形态时，也必定不会慢的。</p>
<p>关于读书，暑期末读了《鼠疫》前半。emmm居然还没读完，于是明天去图书馆就看书吧。</p>
<p>观他人之记录，如久未经园艺的庭院，经其手便理成了干净整洁的庭院，盆罐壶水罗列得整齐清楚；而自己来写时，却有点不知何从下手，时时清理下杂草，还没清理完就去扫地；好不容易扫完了，又浇水把干净的小路沾湿了点，然后只能等它自己干掉。到了差不多干净的时候，又发现有点东西应该在扫地之前就清理而没有清理。</p>
<p>一句话，那就是看别人整的好，自己来整就整的乱，没有提前组织文章结构——但高考过后，也许我还没又那个兴致来写好一篇记录。至少在之前的记录里都大致有这个通病。</p>
<p>但又想了想，这是病么？字里行间，时时渗透、互相照应，这样的写法似乎又有自己的好处。</p>
<p>于是再也不管那么多，哪天想改再说吧。</p>
<h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>大一一年，平淡无奇，社交起伏不大，能力在隐隐地上升，但还需要更多的激励方能开启下一阶段。个人对目前的适应情况比较满意——对所有事都有几个备用方案的程度，并且基本能执行出并非最差预估的结果。这对一些人来说是奢求，对另一些人来说是essential，亦不再做多的评价。</p>
<h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><p>Java，JavaScript，然后是C#和JavaScript的衍生。要求实战为先，在这年内，做一些能玩的小游戏。<br>网络得会点基础，看看计算机概论那本书，然后去看CSAPP。</p>
<p>配好一个openwrt的编译环境。</p>
<p>博客完善，如上文计划一样。</p>
<p>最大程度上保证学业正常发育，不要求高绩点，不要求竞争。</p>
<p>常常逛逛Leetcode。</p>
<p>读书，《网络》、《鼠疫》、《毛泽东》、《算法》</p>
<p>尝试着去参加点竞赛，弥补下经验的空缺。</p>
<p><del>还有什么来着？明天继续整理</del></p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>结构体补充</title>
    <url>/2020/12/15/%E7%BB%93%E6%9E%84%E4%BD%93%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<p>补充关于结构体和链表的操作</p>
<a id="more"></a>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Student* <span class="title">loadData</span><span class="params">(<span class="keyword">int</span>&amp; n)</span><span class="comment">//考虑做存档功能</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n = <span class="number">0</span>;<span class="comment">//之前的数据全部清零</span></span><br><span class="line">	<span class="keyword">int</span> No; <span class="keyword">char</span> Name[<span class="number">20</span>]; <span class="keyword">double</span> Score[<span class="number">3</span>];</span><br><span class="line">	Student* T = <span class="keyword">new</span> Student;<span class="comment">//只有Student T是在运行时栈上，会被销毁</span></span><br><span class="line">	Student* mp2 = T;</span><br><span class="line">	FILE* fp = fopen(<span class="string">&quot;./学生成绩单.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (!feof(fp)) </span><br><span class="line">    <span class="comment">//feof（）检测一个文件是否结束，即到达文件尾，若结束，则返回非0值，否则返回0</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d\t%s\t%lf\t%lf\t%lf\n&quot;</span>, &amp;No, Name, Score, Score + <span class="number">1</span>, Score + <span class="number">2</span>);</span><br><span class="line">	mp2-&gt;No = No; strcpy_s(mp2-&gt;Name, Name); mp2-&gt;score[<span class="number">0</span>] = Score[<span class="number">0</span>]; mp2-&gt;score[<span class="number">1</span>] = Score[<span class="number">1</span>]; mp2-&gt;score[<span class="number">2</span>] = Score[<span class="number">2</span>];</span><br><span class="line">	mp2-&gt;next = <span class="keyword">new</span> Student;</span><br><span class="line">	mp2 = mp2-&gt;next;</span><br><span class="line">	mp2-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//使成员next变为nullptr，这才是真正的封装，下面那个不算，只是指针归零，方便下次再用。</span></span><br><span class="line">	n++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题代码：多出一组屯屯屯</p>
<p>原因出于在已new了一组空的结构体，按while内逻辑，会多出一个“给下一组数据准备的空间”，无论多少组都是，结束循环后会多出一组空结构体，然后名字就叫“屯屯屯…（20个）”。</p>
<p>改正后：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Student* <span class="title">loadData</span><span class="params">(<span class="keyword">int</span>&amp; n)</span><span class="comment">//考虑做存档功能？</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n = <span class="number">0</span>;<span class="comment">//之前的数据全部清零</span></span><br><span class="line">	<span class="keyword">int</span> No; <span class="keyword">char</span> Name[<span class="number">20</span>]; <span class="keyword">double</span> Score[<span class="number">3</span>];</span><br><span class="line">	Student* T = <span class="keyword">new</span> Student;<span class="comment">//只有Student T是在运行时栈上，会被销毁</span></span><br><span class="line">	Student* mp2 = T;</span><br><span class="line">	FILE* fp = fopen(<span class="string">&quot;./学生成绩单.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (!feof(fp)) <span class="comment">//feof（）检测一个文件是否结束，即到达文件尾，若结束，则返回非0值，否则返回0</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			mp2-&gt;next = <span class="keyword">new</span> Student;</span><br><span class="line">			mp2 = mp2-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d\t%s\t%lf\t%lf\t%lf\n&quot;</span>, &amp;No, Name, Score, Score + <span class="number">1</span>, Score + <span class="number">2</span>);</span><br><span class="line">		mp2-&gt;No = No; strcpy_s(mp2-&gt;Name, Name); mp2-&gt;score[<span class="number">0</span>] = Score[<span class="number">0</span>]; mp2-&gt;score[<span class="number">1</span>] = Score[<span class="number">1</span>]; mp2-&gt;score[<span class="number">2</span>] = Score[<span class="number">2</span>];</span><br><span class="line">		mp2-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//使成员next变为nullptr，这才是真正的封装，下面那个不算，只是指针归零，方便下次再用。</span></span><br><span class="line">		n++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//封装尾部，不能只让移动指针变为nullptr，否则最后一个结构体的成员next仍为乱码。</span></span><br><span class="line">	<span class="comment">//让指针变为nullptr只是让指针归零，归零后甚至还能调用；但原本指针指向的数据呢？还在那里？归于荒野？都是。</span></span><br><span class="line">	<span class="comment">//也就是说，next指针和这个mp2是不同的两个指针，一个是结构体成员，一个是外来辅助用的。</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//其实这也是封装不统一导致的后果，有的封空结构体的头为nullptr，有的封空结构体的尾为nullptr，</span></span><br><span class="line">	<span class="comment">//其他功能调用到时候又各有不同（特别是while(移动指针!=nullptr)），结果为了统一只能两个都封</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//再注：原本的封装方式略有问题，我们创建的每一个结构体都应该是满的，但之前是装满之后再new一个出来，这不好，会多出一组屯屯屯（不过正好因为这个问题也有了上面的结论）</span></span><br><span class="line">	<span class="comment">//这也才想起我之前为什么在case 3里面分出两种情况：一种是第一次添加，另一种是第二次及以后添加，因为我们在前头都已经声明了一个空的结构体，如果这个结构体不使用，</span></span><br><span class="line">	<span class="comment">//而用统一格式去添加新结构体的话，就会向上面那样多出一组屯屯屯；但是，既然知道了关键点在哪里，也不用再写一次第一次该怎么办的分支了——用简单的吧，给new“上锁”</span></span><br><span class="line">	<span class="comment">//那么“锁”只有在n &gt; 0才去打开。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//这种方式是不能使用的：我们没必要把不知道会不会填充的地方开辟出来。而应该确认了它会填充，再开辟空间</span></span><br></pre></td></tr></table></figure>





<p>另一个简单点的例子，不过你要提前想好，我们已经声明了一个空的结构体;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;…………省略前面…………</span><br><span class="line">    <span class="keyword">int</span> overlap = <span class="number">0</span>;<span class="comment">//检测重复数量</span></span><br><span class="line">	<span class="keyword">while</span> (moving_pin != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">if</span> (moving_pin-&gt;No != No)</span><br><span class="line">				overlap++;</span><br><span class="line">		moving_pin = moving_pin-&gt;next;</span><br><span class="line">		moving_pin = head;</span><br><span class="line">		(*p).next = <span class="keyword">new</span> Student;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		p-&gt;No = No; <span class="built_in">strcpy</span>(p-&gt;Name, Name); p-&gt;score[<span class="number">0</span>] = score[<span class="number">0</span>]; p-&gt;score[<span class="number">1</span>] = score[<span class="number">1</span>]; p-&gt;score[<span class="number">2</span>] = score[<span class="number">2</span>];</span><br><span class="line">		p-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//调整了先锋指针封装末尾的顺序，原本这是在else if外面的</span></span><br><span class="line">		n++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
